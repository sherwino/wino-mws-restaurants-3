{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/idb/lib/idb.js","src/js/browser.js","src/js/dbhelper.js","src/js/dbpromise.js","src/js/register.js","src/js/restaurant_info.js","src/js/reviewform.js"],"names":[],"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","file":"restaurant_info.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","let usersBrowser;\r\nconst { userAgent } = navigator;\r\n\r\n// The order matters here, and this may report false positives for unlisted browsers.\r\nif (userAgent.indexOf('Firefox') > -1) {\r\n    usersBrowser = 'Mozilla Firefox';\r\n} else if (userAgent.indexOf('Opera') > -1) {\r\n    usersBrowser = 'Opera';\r\n} else if (userAgent.indexOf('Trident') > -1) {\r\n    usersBrowser = 'Microsoft Internet Explorer';\r\n} else if (userAgent.indexOf('Edge') > -1) {\r\n    usersBrowser = 'Microsoft Edge';\r\n} else if (userAgent.indexOf('Chrome') > -1) {\r\n    usersBrowser = 'Google Chrome or Chromium';\r\n} else if (userAgent.indexOf('Safari') > -1) {\r\n    usersBrowser = 'Apple Safari';\r\n} else {\r\n    usersBrowser = 'unknown';\r\n}\r\n\r\nconsole.log(`You are using: ${usersBrowser}`);\r\n","import dbPromise from \"./dbpromise\";\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nexport default class DBHelper {\r\n  /**\r\n   * API URL\r\n   */\r\n  static get API_URL() {\r\n    const port = 1337; // port where sails server will listen.\r\n\r\n    const heroku = 'https://winosails.herokuapp.com';\r\n    const isLocalHost = () => {\r\n      if (window.location.hostname.includes(\"localhost\")) {\r\n        return `http://localhost:${port}`;\r\n      }\r\n    };\r\n\r\n    const url = isLocalHost() || heroku;\r\n\r\n    return url;\r\n  }\r\n\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open(\"GET\", `${DBHelper.API_URL}/restaurants`);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) {\r\n        const restaurants = JSON.parse(xhr.responseText);\r\n        dbPromise.putRestaurants(restaurants);\r\n        callback(null, restaurants);\r\n      } else {\r\n        // Oops!. Got an error from server.\r\n        console.log(\r\n          `Request failed. Returned status of ${xhr.status}, trying idb...`\r\n        );\r\n        // if xhr request isn't code 200, try idb\r\n        dbPromise.getRestaurants().then(idbRestaurants => {\r\n          if (idbRestaurants.length) {\r\n            callback(null, idbRestaurants);\r\n          } else {\r\n            callback(\"No restaurants found in idb\", null);\r\n          }\r\n        });\r\n      }\r\n    };\r\n    // XHR needs error handling for when server is down (doesn't respond or sends back codes)\r\n    xhr.onerror = () => {\r\n      console.log(\"Error while trying XHR, trying idb...\");\r\n      // try idb, and if we get restaurants back, return them, otherwise return an error\r\n      dbPromise.getRestaurants().then(idbRestaurants => {\r\n        if (idbRestaurants.length) {\r\n          callback(null, idbRestaurants);\r\n        } else {\r\n          callback(\"No restaurants found in idb\", null);\r\n        }\r\n      });\r\n    };\r\n    xhr.send();\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    fetch(`${DBHelper.API_URL}/restaurants/${id}`)\r\n      .then(response => {\r\n        if (!response.ok)\r\n          return Promise.reject(\"Restaurant couldn't be fetched from network\");\r\n        return response.json();\r\n      })\r\n      .then(fetchedRestaurant => {\r\n        // if restaurant could be fetched from network:\r\n        dbPromise.putRestaurants(fetchedRestaurant);\r\n        return callback(null, fetchedRestaurant);\r\n      })\r\n      .catch(networkError => {\r\n        // if restaurant couldn't be fetched from network:\r\n        console.log(`${networkError}, trying idb.`);\r\n        dbPromise.getRestaurants(id).then(idbRestaurant => {\r\n          if (!idbRestaurant)\r\n            return callback(\"Restaurant not found in idb either\", null);\r\n          return callback(null, idbRestaurant);\r\n        });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurant reviews by restaurant id.\r\n   */\r\n  static fetchsReviewsByRestaurantId(id) {\r\n    return fetch(`${DBHelper.API_URL}/reviews/?restaurant_id=${id}`)\r\n      .then(response => {\r\n        if (!response.ok)\r\n          return Promise.reject(\"Reviews couldn't be fetched from network\");\r\n        return response.json();\r\n      })\r\n      .then(fetchedReviews => {\r\n        dbPromise.putReviews(fetchedReviews);\r\n        return fetchedReviews;\r\n      })\r\n      .catch(networkError => {\r\n        console.log(`${networkError}`);\r\n        return dbPromise.getReviewsForRestaurant(id)\r\n        .then(idbReviews => {\r\n          if(!idbReviews.length) return null;\r\n          return idbReviewsl\r\n        });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    callback\r\n  ) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != \"all\") {\r\n          // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != \"all\") {\r\n          // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map(\r\n          (v, i) => restaurants[i].neighborhood\r\n        );\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter(\r\n          (v, i) => neighborhoods.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter(\r\n          (v, i) => cuisines.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return `./restaurant.html?id=${restaurant.id}`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n      const url = `./img/${restaurant.photograph || restaurant.id}-medium.jpg`;\r\n  \r\n    return url;\r\n  }\r\n\r\n  /**\r\n   * Restaurant srcset attribute for browser to decide best resolution. It uses restaurant.photograph\r\n   * and fallbacks to restaurant.id if former is missing.\r\n   */\r\n  static imageSrcsetForRestaurant(restaurant) {\r\n    const imageSrc = `./img/${restaurant.photograph || restaurant.id}`;\r\n    return `${imageSrc}-small.jpg 300w,\r\n            ${imageSrc}-medium.jpg 600w,\r\n            ${imageSrc}-large.jpg 800w`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant sizes attribute so browser knows image sizes before deciding\r\n   * what image to download.\r\n   */\r\n  static imageSizesForRestaurant(restaurant) {\r\n    return `(max-width: 360px) 280px,\r\n            (max-width: 600px) 600px,\r\n            400px`;\r\n  }\r\n\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n    return marker;\r\n  }\r\n}\r\n","import idb from 'idb';\n\nconst dbPromise = {\n  // creation and updating of database happens here.\n  db: idb.open('restaurant-reviews-db', 2, function (upgradeDb) {\n    switch (upgradeDb.oldVersion) {\n      case 0:\n        upgradeDb.createObjectStore('restaurants', { keyPath: 'id' });\n      case 1: \n      upgradeDb.createObjectStore('reviews', { keyPath: 'id'})\n      .createIndex('restaurant_id', 'restaurant_id');\n    }\n  }),\n\n  /**\n   * Save a restaurant or array of restaurants into idb, using promises.\n   */\n  putRestaurants(restaurants, forceUpdate = false) {\n    if (!restaurants.push) restaurants = [restaurants];\n    return this.db.then(db => {\n      const store = db.transaction('restaurants', 'readwrite').objectStore('restaurants');\n      Promise.all(restaurants.map(networkRestaurant => {\n        return store.get(networkRestaurant.id).then(idbRestaurant => {\n          if(forceUpdate) return store.put(networkRestaurant);\n          if (!idbRestaurant || new Date(networkRestaurant.updatedAt) > new Date(idbRestaurant.updatedAt)) {\n            return store.put(networkRestaurant);  \n          } \n        });\n      })).then(function () {\n        return store.complete;\n      });\n    });\n  },\n\n  /**\n   * Get a restaurant, by its id, or all stored restaurants in idb using promises.\n   * If no argument is passed, all restaurants will returned.\n   */\n  getRestaurants(id = undefined) {\n    return this.db.then(db => {\n      const store = db.transaction('restaurants').objectStore('restaurants');\n      if (id) return store.get(Number(id));\n      return store.getAll();\n    });\n  },\n\n  putReviews(reviews) {\n    if (!reviews.push) reviews = [reviews];\n    return this.db.then(db => {\n      const store = db.transaction('reviews', 'readwrite').objectStore('reviews');\n      Promise.all(reviews.map(networkReview => {\n        return store.get(networkReview.id).then(idbReview => {\n          if(!idbReview || new Date(networkReview.updatedAt) > new Date(idbReview.updatedAt)) {\n            return store.put(networkReview);\n          }\n        });\n      })).then(function () {\n        return store.completel\n      });\n    });\n  },\n\n  getReviewsForRestaurant(id) {\n    return this.db.then(db => {\n      const storeIndex = db.transaction('reviews').objectStore('reviews').index('restaurant_id');\n      return storeIndex.getAll(Number(id));\n    });\n  },\n\n};\n\nexport default dbPromise;","const { serviceWorker } = navigator;\r\n\r\nconst registerServiceWorker = () => {\r\n    if ('serviceWorker' in navigator) {\r\n        serviceWorker.register('./sw.js', \r\n            { scope: './' }\r\n        ).then((registration) => {\r\n            console.info('Service worker registered', registration.scope);\r\n            const sw = {};\r\n    \r\n            if (registration.installing) {\r\n                sw.status = registration.installing;\r\n                console.info('Service worker installing');\r\n            }\r\n    \r\n            if (registration.waiting) {\r\n                sw.status = registration.waiting;\r\n                console.warn('Service worker waiting');\r\n            }\r\n    \r\n            if (registration.active) {\r\n                sw.status = registration.active;\r\n                console.info('Service worker active');\r\n            }\r\n    \r\n            if (sw.status) {\r\n                console.log('Service worker state:', sw.status.state);\r\n                sw.status.addEventListener('statechange', (e) => {\r\n                    console.log('Service worker state:', e.target.state)\r\n                });\r\n            }\r\n        }).catch(() => {\r\n            console.error('Service worker installation failed');\r\n        })\r\n    };\r\n};\r\n\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n    registerServiceWorker();\r\n    \r\n  });","'use-strict';\r\n\r\nimport DBHelper from './dbhelper';\r\nimport './register';\r\nimport './browser';\r\nimport reviewForm from './reviewform';\r\n\r\n\r\nlet restaurant = '';\r\nvar newMap;\r\n\r\n/**\r\n * Initialize map if you look at the script imported google runs init\r\n */\r\nwindow.initMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      newMap = new google.maps.Map(document.getElementById('detail-map'), {\r\n        zoom: 16,\r\n        center: restaurant.latlng,\r\n        scrollwheel: false\r\n      });\r\n      fillBreadcrumb();\r\n      DBHelper.mapMarkerForRestaurant(self.restaurant, newMap);\r\n    }\r\n  // Google map makes a bunch of links that steal focus of a screen reader\r\n  // Going to add an event that sets attribute to all of these items\r\n  const mapEl = document.getElementById('detail-map');\r\n  mapEl.addEventListener(\"keydown\", () => {\r\n  const mapLinks = mapEl.querySelectorAll('a');\r\n  mapLinks.forEach(link => link.setAttribute('tabindex', '-1'));\r\n});\r\n  \r\n  });\r\n}\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nconst fetchRestaurantFromURL = (callback) => {\r\n  if (self.restaurant) { // restaurant already fetched!\r\n    callback(null, self.restaurant)\r\n    return;\r\n  }\r\n  const id = getParameterByName('id');\r\n  if (!id) { // no id found in URL\r\n    error = 'No restaurant id in URL'\r\n    callback(error, null);\r\n  } else {\r\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n      self.restaurant = restaurant;\r\n      if (!restaurant) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n      fillRestaurantHTML();\r\n      callback(null, restaurant)\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\r\n  const name = document.getElementById('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n\r\n  // const favButtonContainer = document.getElementById('fav-button-container');\r\n  // favButtonContainer.appendChild(favoriteButton(restaurant));\r\n  // favButtonContainer.alt = `Save ${restaurant.name} as a favorite`;\r\n\r\n  const address = document.getElementById('restaurant-address');\r\n  address.innerHTML = restaurant.address;\r\n\r\n  const image = document.getElementById('restaurant-img');\r\n  image.className = 'restaurant-img'\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.srcset = DBHelper.imageSrcsetForRestaurant(restaurant);\r\n  image.sizes = DBHelper.imageSizesForRestaurant(restaurant);\r\n  image.alt = `${restaurant.name} promotional image`;\r\n\r\n  const cuisine = document.getElementById('restaurant-cuisine');\r\n  cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n  // fill operating hours\r\n  if (restaurant.operating_hours) {\r\n    fillRestaurantHoursHTML();\r\n  }\r\n  // fill reviews\r\n  DBHelper.fetchsReviewsByRestaurantId(restaurant.id)\r\n  .then(fillReviewsHTML());\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n  const hours = document.getElementById('restaurant-hours');\r\n  for (let key in operatingHours) {\r\n    const row = document.createElement('tr');\r\n\r\n    const day = document.createElement('td');\r\n    day.innerHTML = key;\r\n    row.appendChild(day);\r\n\r\n    const time = document.createElement('td');\r\n    time.innerHTML = operatingHours[key];\r\n    row.appendChild(time);\r\n    hours.setAttribute('tabindex', '0');\r\n    hours.setAttribute('aria-label', `Hours of operation for ${self.restaurant.name}`)\r\n    hours.appendChild(row);\r\n  }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n  const container = document.getElementById('reviews-container');\r\n  const title = document.createElement('h3');\r\n  title.innerHTML = 'Reviews';\r\n  container.appendChild(title);\r\n\r\n  const list = document.createElement('div');\r\n  list.id = 'list-container';\r\n  container.appendChild(list);\r\n\r\n  const ul = document.createElement('ul');\r\n  ul.id = 'reviews-list';\r\n  ul.setAttribute('tabindex', '0');\r\n  ul.setAttribute('aria-label', `List of restaurant reviews for ${self.restaurant.name}`);\r\n  list.appendChild(ul);\r\n\r\n  if (!reviews) {\r\n    const noReviews = document.createElement('p');\r\n    noReviews.innerHTML = 'No reviews yet!';\r\n    noReviews.id = 'no-reviews';\r\n    container.appendChild(noReviews);\r\n\r\n  } else {\r\n    reviews.forEach(review => {\r\n      ul.appendChild(createReviewHTML(review));\r\n\r\n    });\r\n  }\r\n\r\n  const head = document.createElement('h3');\r\n  head.innerHTML = \"Leave a Review\";\r\n  container.appendChild(head);\r\n  const id = getParameterByName('id');\r\n  container.appendChild(reviewForm(id));\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\nconst createReviewHTML = (review) => {\r\n  const li = document.createElement('li');\r\n  const name = document.createElement('p');\r\n  name.innerHTML = review.name;\r\n  li.appendChild(name);\r\n\r\n  const date = document.createElement('p');\r\n  date.innerHTML = new Date(review.createdAt).toLocaleDateString();\r\n  date.innerHTML = review.date;\r\n  li.appendChild(date);\r\n\r\n  const rating = document.createElement('p');\r\n  rating.innerHTML = `Rating: ${review.rating}`;\r\n  li.appendChild(rating);\r\n\r\n  const comments = document.createElement('p');\r\n  comments.innerHTML = review.comments;\r\n  li.appendChild(comments);\r\n\r\n  return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nconst fillBreadcrumb = (restaurant=self.restaurant) => {\r\n  const breadcrumb = document.getElementById('breadcrumb');\r\n  const li = document.createElement('li');\r\n  li.innerHTML = restaurant.name;\r\n  breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\nconst getParameterByName = (name, url) => {\r\n  if (!url)\r\n    url = window.location.href;\r\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n    results = regex.exec(url);\r\n  if (!results)\r\n    return null;\r\n  if (!results[2])\r\n    return '';\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n","import DBHelper from \"./dbhelper\";\nimport dbPromise from \"./dbpromise\";\n\n/**\n * Returns a li element with review data so it can be appended to\n * the review list.\n */\nfunction createReviewHTML(review) {\n  const li = document.createElement(\"li\");\n  const reviewer = document.createElement(\"strong\");\n  reviewer.innerHTML = review.name;\n  reviewer.className = 'reviewer';\n  reviewer.setAttribute('alt', 'Reviewer name');\n  li.appendChild(reviewer);\n\n  const date = document.createElement(\"p\");\n  date.innerHTML = new Date(review.createdAt).toLocaleDateString();\n  date.className = 'date';\n  date.setAttribute('alt', 'Date reviewed');\n  li.appendChild(date);\n\n  const rating = document.createElement(\"p\");\n  rating.innerHTML = `Rating: ${review.rating}`;\n  rating.className = 'rating';\n  rating.setAttribute('alt', 'Rating given by reviewer');\n  li.appendChild(rating);\n\n  const comments = document.createElement(\"p\");\n  comments.innerHTML = review.comments;\n  comments.className = 'comments';\n  comments.setAttribute('alt', 'Comments written by reviewer');\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Clear form data\n */\nfunction clearForm() {\n  // clear form data\n  document.getElementById(\"name\").value = \"\";\n  document.getElementById(\"rating\").selectedIndex = 0;\n  document.getElementById(\"comments\").value = \"\";\n}\n\n/**\n * Remove no review element\n */\nfunction removeNoReviews() {\n  const noReviews = document.getElementById(\"no-reviews\");\n  \n  if(noReviews) noReviews.remove();\n\n}\n\n/**\n * Make sure all form fields have a value and return data in\n * an object, so is ready for a POST request.\n */\nfunction validateAndGetData() {\n  const data = {};\n\n  // get name\n  let name = document.getElementById(\"name\");\n  if (name.value === \"\") {\n    name.focus();\n    return;\n  }\n  data.name = name.value;\n\n  // get rating\n  const ratingSelect = document.getElementById(\"rating\");\n  const rating = ratingSelect.options[ratingSelect.selectedIndex].value;\n  if (rating == \"--\") {\n    ratingSelect.focus();\n    return;\n  }\n  data.rating = Number(rating);\n\n  // get comments\n  let comments = document.getElementById(\"comments\");\n  if (comments.value === \"\") {\n    comments.focus();\n    return;\n  }\n  data.comments = comments.value;\n\n  // get restaurant_id\n  let restaurantId = document.getElementById(\"review-form\").dataset\n    .restaurantId;\n  data.restaurant_id = Number(restaurantId);\n\n  // set createdAT\n  data.createdAt = new Date().toISOString();\n\n  return data;\n}\n\n/**\n * Handle submit.\n */\nfunction handleSubmit(e) {\n  e.preventDefault();\n  const review = validateAndGetData();\n  if (!review) return;\n\n  const url = `${DBHelper.API_URL}/reviews/`;\n  const POST = {\n    method: \"POST\",\n    body: JSON.stringify(review)\n  };\n\n  // TODO: use Background Sync to sync data with API server\n  return fetch(url, POST)\n    .then(response => {\n      if (!response.ok)\n        return Promise.reject(\"We couldn't post review to server.\");\n      return response.json();\n    })\n    .then(newNetworkReview => {\n      // save new review on idb\n      dbPromise.putReviews(newNetworkReview);\n      // post new review on page\n      const reviewList = document.getElementById(\"reviews-list\");\n      const review = createReviewHTML(newNetworkReview);\n      reviewList.appendChild(review);\n\n      //remove noReviews element\n      removeNoReviews();\n\n      // clear form\n      clearForm();\n    });\n}\n\n/**\n * Returns a form element for posting new reviews.\n */\nexport default function reviewForm(restaurantId) {\n  const form = document.createElement(\"form\");\n  form.id = \"review-form\";\n  form.dataset.restaurantId = restaurantId;\n\n  let p = document.createElement(\"p\");\n  const name = document.createElement(\"input\");\n  name.id = \"name\";\n  name.setAttribute(\"type\", \"text\");\n  name.setAttribute(\"aria-label\", \"Name\");\n  name.setAttribute(\"placeholder\", \"Enter Your Name\");\n  p.appendChild(name);\n  form.appendChild(p);\n\n  p = document.createElement(\"p\");\n  const selectLabel = document.createElement(\"label\");\n  selectLabel.setAttribute(\"for\", \"rating\");\n  selectLabel.innerText = \"Your rating: \";\n  p.appendChild(selectLabel);\n  const select = document.createElement(\"select\");\n  select.id = \"rating\";\n  select.name = \"rating\";\n  select.classList.add(\"rating\");\n  [\"--\", 1, 2, 3, 4, 5].forEach(number => {\n    const option = document.createElement(\"option\");\n    option.value = number;\n    option.innerHTML = number;\n    if (number === \"--\") option.selected = true;\n    select.appendChild(option);\n  });\n  p.appendChild(select);\n  form.appendChild(p);\n\n  p = document.createElement(\"p\");\n  const textarea = document.createElement(\"textarea\");\n  textarea.id = \"comments\";\n  textarea.setAttribute(\"aria-label\", \"comments\");\n  textarea.setAttribute(\"placeholder\", \"Enter any comments here\");\n  textarea.setAttribute(\"rows\", \"10\");\n  p.appendChild(textarea);\n  form.appendChild(p);\n\n  p = document.createElement(\"p\");\n  const addButton = document.createElement(\"button\");\n  addButton.setAttribute(\"type\", \"submit\");\n  addButton.setAttribute(\"aria-label\", \"Add Review\");\n  addButton.classList.add(\"add-review\");\n  addButton.innerHTML = \"<span>+</span>\";\n  p.appendChild(addButton);\n  form.appendChild(p);\n\n  form.onsubmit = handleSubmit;\n\n  return form;\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}