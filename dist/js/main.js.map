{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/idb/lib/idb.js","src/js/browser.js","src/js/dbhelper.js","src/js/dbpromise.js","src/js/favoriteButton.js","src/js/favoritebutton.js","src/js/lozad.js","src/js/main.js","src/js/register.js"],"names":[],"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","file":"main.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","let usersBrowser;\r\nconst { userAgent } = navigator;\r\n\r\n// The order matters here, and this may report false positives for unlisted browsers.\r\nif (userAgent.indexOf('Firefox') > -1) {\r\n    usersBrowser = 'Mozilla Firefox';\r\n} else if (userAgent.indexOf('Opera') > -1) {\r\n    usersBrowser = 'Opera';\r\n} else if (userAgent.indexOf('Trident') > -1) {\r\n    usersBrowser = 'Microsoft Internet Explorer';\r\n} else if (userAgent.indexOf('Edge') > -1) {\r\n    usersBrowser = 'Microsoft Edge';\r\n} else if (userAgent.indexOf('Chrome') > -1) {\r\n    usersBrowser = 'Google Chrome or Chromium';\r\n} else if (userAgent.indexOf('Safari') > -1) {\r\n    usersBrowser = 'Apple Safari';\r\n} else {\r\n    usersBrowser = 'unknown';\r\n}\r\n\r\nconsole.log(`You are using: ${usersBrowser}`);\r\n","import dbPromise from \"./dbpromise\";\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nexport default class DBHelper {\r\n  /**\r\n   * API URL\r\n   */\r\n  static get API_URL() {\r\n    const port = 1337; // port where sails server will listen.\r\n\r\n    const heroku = \"https://winosails.herokuapp.com\";\r\n    const isLocalHost = () => {\r\n      if (window.location.hostname.includes(\"localhost\")) {\r\n        return `http://localhost:${port}`;\r\n      }\r\n    };\r\n\r\n    const url = isLocalHost() || heroku;\r\n\r\n    return url;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    this.syncOfflinefav()\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open(\"GET\", `${DBHelper.API_URL}/restaurants`);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) {\r\n        const restaurants = JSON.parse(xhr.responseText);\r\n        dbPromise.putRestaurants(restaurants);\r\n        callback(null, restaurants);\r\n      } else {\r\n        // Oops!. Got an error from server.\r\n        console.log(\r\n          `Request failed. Returned status of ${xhr.status}, trying idb...`\r\n        );\r\n        // if xhr request isn't code 200, try idb\r\n        dbPromise.getRestaurants().then(idbRestaurants => {\r\n          if (idbRestaurants.length) {\r\n            callback(null, idbRestaurants);\r\n          } else {\r\n            callback(\"No restaurants found in idb\", null);\r\n          }\r\n        });\r\n      }\r\n    };\r\n    // XHR needs error handling for when server is down (doesn't respond or sends back codes)\r\n    xhr.onerror = () => {\r\n      console.log(\"Error while trying XHR, trying idb...\");\r\n      // try idb, and if we get restaurants back, return them, otherwise return an error\r\n      dbPromise.getRestaurants().then(idbRestaurants => {\r\n        if (idbRestaurants.length) {\r\n          callback(null, idbRestaurants);\r\n        } else {\r\n          callback(\"No restaurants found in idb\", null);\r\n        }\r\n      });\r\n    };\r\n    xhr.send();\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    this.syncOfflineReviews();\r\n    fetch(`${DBHelper.API_URL}/restaurants/${id}`)\r\n      .then(response => {\r\n        if (!response.ok)\r\n          return Promise.reject(\"Restaurant couldn't be fetched from network\");\r\n        return response.json();\r\n      })\r\n      .then(fetchedRestaurant => {\r\n        // if restaurant could be fetched from network:\r\n        dbPromise.putRestaurants(fetchedRestaurant);\r\n        return callback(null, fetchedRestaurant);\r\n      })\r\n      .catch(networkError => {\r\n        // if restaurant couldn't be fetched from network:\r\n        console.log(`${networkError}, trying idb.`);\r\n        dbPromise.getRestaurants(id).then(idbRestaurant => {\r\n          if (!idbRestaurant)\r\n            return callback(\"Restaurant not found in idb either\", null);\r\n          return callback(null, idbRestaurant);\r\n        });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurant reviews by restaurant id.\r\n   */\r\n  static fetchsReviewsByRestaurantId(id) {\r\n    return dbPromise.getReviewsForRestaurant(id).then(idbReviews => {\r\n      if (!idbReviews.length) {\r\n        console.info(\"No reviews in idb\", idbReviews);\r\n        console.info(\"Fetching from API\");\r\n\r\n        return fetch(`${DBHelper.API_URL}/reviews/?restaurant_id=${id}`)\r\n          .then(response => response.json())\r\n          .then(fetchedReviews => {\r\n            console.info(\"Found Reviews saving to idb\");\r\n            dbPromise.putReviews(fetchedReviews);\r\n\r\n            return fetchedReviews;\r\n          })\r\n          .catch(err => {\r\n            console.error(\"Reviews couldn't be fetched from network, sorry.\");\r\n          });\r\n      } else {\r\n        console.info(\"Found reviews on idb\");\r\n\r\n        return idbReviews;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * I have an idb collection of offline messages that need to get online\r\n   */\r\n  static syncOfflineReviews() {\r\n    return dbPromise.getOfflineReviews().then(reviews => {\r\n      // If we actually got some reviews, send them to idb, not sure if I send whole object\r\n      if (reviews) {\r\n        const url = `${DBHelper.API_URL}/reviews/`;\r\n        const POST = {\r\n          method: \"POST\",\r\n          body: JSON.stringify(reviews)\r\n        };\r\n\r\n        return fetch(url, POST).then(response => {\r\n          if (!response.ok) {\r\n            return Promise.reject(\"We couldn't post review to server.\");\r\n          }\r\n          console.info(\"Posted offline reviews to api successfully\");\r\n          return response.json();\r\n        });\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n\r\n    /**\r\n   * I have an idb collection of offline messages that need to get online\r\n   */\r\n  static syncOfflinefav() {\r\n    return dbPromise.getOfflinefavs().then(favs => {\r\n      // If we actually got some favs, send them to idb\r\n      if (favs) {\r\n        const url = `${DBHelper.API_URL}/restaurants/${restaurantId}/?is_favorite=${!fav}`;\r\n        const PUT = {\r\n          method: \"PUT\",\r\n        };\r\n\r\n        return fetch(url, PUT).then(response => {\r\n          if (!response.ok) {\r\n            return Promise.reject(\"We couldn't post fav to server.\");\r\n          }\r\n          console.info(\"Posted offline favs to api successfully\");\r\n          return response.json();\r\n        });\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    callback\r\n  ) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != \"all\") {\r\n          // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != \"all\") {\r\n          // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map(\r\n          (v, i) => restaurants[i].neighborhood\r\n        );\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter(\r\n          (v, i) => neighborhoods.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter(\r\n          (v, i) => cuisines.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return `./restaurant.html?id=${restaurant.id}`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    const url = `./img/${restaurant.photograph || restaurant.id}-medium.jpg`;\r\n\r\n    return url;\r\n  }\r\n\r\n  /**\r\n   * Restaurant srcset attribute for browser to decide best resolution. It uses restaurant.photograph\r\n   * and fallbacks to restaurant.id if former is missing.\r\n   */\r\n  static imageSrcsetForRestaurant(restaurant) {\r\n    const imageSrc = `./img/${restaurant.photograph || restaurant.id}`;\r\n    return `${imageSrc}-small.jpg 300w,\r\n            ${imageSrc}-medium.jpg 600w,\r\n            ${imageSrc}-large.jpg 800w`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant sizes attribute so browser knows image sizes before deciding\r\n   * what image to download.\r\n   */\r\n  static imageSizesForRestaurant(restaurant) {\r\n    return `(max-width: 360px) 280px,\r\n            (max-width: 600px) 600px,\r\n            400px`;\r\n  }\r\n\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n    return marker;\r\n  }\r\n}\r\n","import idb from \"idb\";\r\n\r\nconst dbPromise = {\r\n  // creation and updating of database happens here.\r\n  db: idb.open(\"restaurant-reviews-db\", 3, function (upgradeDb) {\r\n    switch (upgradeDb.oldVersion) {\r\n      case 0:\r\n        upgradeDb.createObjectStore(\"restaurants\", { keyPath: \"id\" });\r\n      case 1:\r\n        upgradeDb\r\n          .createObjectStore(\"reviews\", { keyPath: \"id\" })\r\n          .createIndex(\"restaurant_id\", \"restaurant_id\");\r\n      case 2:\r\n        upgradeDb\r\n          .createObjectStore(\"offline\", { autoIncrement: true, keyPath: \"id\" })\r\n          .createIndex(\"restaurant_id\", \"restaurant_id\");\r\n      case 3:\r\n        upgradeDb\r\n          .createObjectStore(\"offline-fav\", { autoIncrement: true, keyPath: \"id\" })\r\n          .createIndex(\"restaurant_id\", \"restaurant_id\");\r\n    }\r\n  }),\r\n\r\n  /**\r\n   * Save restaurant\r\n   */\r\n  putRestaurants(restaurants, forceUpdate = false) {\r\n    if (!restaurants.push) restaurants = [restaurants];\r\n    return this.db.then(db => {\r\n      const store = db\r\n        .transaction(\"restaurants\", \"readwrite\")\r\n        .objectStore(\"restaurants\");\r\n      Promise.all(\r\n        restaurants.map(apiRestaurant => {\r\n          return store.get(apiRestaurant.id).then(idbRestaurant => {\r\n            if (forceUpdate) return store.put(apiRestaurant);\r\n            if (\r\n              !idbRestaurant ||\r\n              new Date(apiRestaurant.updatedAt) >\r\n              new Date(idbRestaurant.updatedAt)\r\n            ) {\r\n              return store.put(apiRestaurant);\r\n            }\r\n          });\r\n        })\r\n      ).then(function () {\r\n        return store.complete;\r\n      });\r\n    });\r\n  },\r\n\r\n  putFavorite(id, boolean) {\r\n    return this.db\r\n      .then((db) => {\r\n        const store = db\r\n          .transaction(\"restaurants\", \"readwrite\")\r\n          .objectStore(\"restaurants\");\r\n\r\n        store.get(id)\r\n          .then((idbRestaurant) => {\r\n            idbRestaurant.is_favorite = boolean.toString();\r\n\r\n            store.put(idbRestaurant);\r\n\r\n            return store.complete;\r\n          })\r\n      }).then(() => {\r\n        console.info('Updated fav in idb');\r\n      }).catch((err) => {\r\n        console.error('Error updating fav in idb', err);\r\n      })\r\n  },\r\n\r\n  /**\r\n   * Get restaurant\r\n   */\r\n  getRestaurants(id = undefined) {\r\n    return this.db.then(db => {\r\n      const store = db.transaction(\"restaurants\").objectStore(\"restaurants\");\r\n      if (id) return store.get(Number(id));\r\n      return store.getAll();\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Save reviews\r\n   */\r\n  putReviews(reviews) {\r\n    if (!reviews.push) reviews = [reviews];\r\n    return this.db.then(db => {\r\n      const store = db\r\n        .transaction(\"reviews\", \"readwrite\")\r\n        .objectStore(\"reviews\");\r\n      Promise.all(\r\n        reviews.map(apiReview => {\r\n          return store.get(apiReview.id).then(idbReview => {\r\n            if (\r\n              !idbReview ||\r\n              new Date(apiReview.updatedAt) > new Date(idbReview.updatedAt)\r\n            ) {\r\n              return store.put(apiReview);\r\n            }\r\n          });\r\n        })\r\n      ).then(function () {\r\n        return store.complete;\r\n      });\r\n    });\r\n  },\r\n\r\n  getReviewsForRestaurant(id) {\r\n    return this.db.then(db => {\r\n      const storeIndex = db\r\n        .transaction(\"reviews\")\r\n        .objectStore(\"reviews\")\r\n        .index(\"restaurant_id\");\r\n      return storeIndex.getAll(Number(id));\r\n    });\r\n  },\r\n\r\n  // Storing offline reviews to offline idb collection\r\n  putOfflineReview(review) {\r\n    return this.db\r\n      .then(db => {\r\n        const store = db.transaction(\"offline\", \"readwrite\").objectStore(\"offline\");\r\n        store.put(review);\r\n\r\n        return store.complete;\r\n      })\r\n      .then(() => {\r\n        console.info('Saved a review to idb while offline');\r\n        // navigator.serviceWorker.ready.then(registration => {\r\n        //   return registration.sync.register(\"flush\");\r\n        // });\r\n      });\r\n  },\r\n\r\n  // Getting whatever I have in the offline idb collection\r\n  getOfflineReviews() {\r\n    return this.db\r\n      .then(db => {\r\n        const store = db.transaction(\"offline\", \"readonly\").objectStore(\"offline\");\r\n\r\n        return store.getAll();\r\n      })\r\n      .then(() => {\r\n        console.info('Retrieved offline reviews');\r\n      });\r\n  },\r\n\r\n  // Clearing whatever I have in the offline idb collection\r\n  clearOfflineReviews() {\r\n    return this.db\r\n      .then(db => {\r\n        const store = db.transaction(\"offline\", \"readwrite\").objectStore(\"offline\");\r\n        store.clear();\r\n\r\n        return store;\r\n      })\r\n      .then((res) => {\r\n        console.warning('Deleted offline reviews', res);\r\n      });\r\n  },\r\n\r\n  // Storing offline favs to offline idb collection\r\n  putOfflinefav(fav) {\r\n    return this.db\r\n      .then(db => {\r\n        const store = db.transaction(\"offline-fav\", \"readwrite\").objectStore(\"offline-fav\");\r\n        store.put(fav);\r\n\r\n        return store.complete;\r\n      })\r\n      .then(() => {\r\n        console.info('Saved a fav to idb while offline');\r\n        // navigator.serviceWorker.ready.then(registration => {\r\n        //   return registration.sync.register(\"flush\");\r\n        // });\r\n      });\r\n  },\r\n\r\n  // Getting whatever I have in the offline idb collection\r\n  getOfflinefavs() {\r\n    return this.db\r\n      .then(db => {\r\n        const store = db.transaction(\"offline-fav\", \"readonly\").objectStore(\"offline-fav\");\r\n\r\n        return store.getAll();\r\n      })\r\n      .then(() => {\r\n        console.info('Retrieved offline favs');\r\n      });\r\n  },\r\n\r\n  // Clearing whatever I have in the offline idb collection\r\n  clearOfflinefavs() {\r\n    return this.db\r\n      .then(db => {\r\n        const store = db.transaction(\"offline-fav\", \"readwrite\").objectStore(\"offline-fav\");\r\n        store.clear();\r\n\r\n        return store;\r\n      })\r\n      .then((res) => {\r\n        console.warning('Deleted offline favs', res);\r\n      });\r\n  },\r\n\r\n};\r\n\r\nexport default dbPromise;\r\n","import DBHelper from \"./dbhelper\";\nimport dbPromise from \"./dbpromise\";\n\nfunction handleClick(e) {\n  e.preventDefault();\n\n  const restaurantId = this.dataset.id;\n  const fav = this.getAttribute('aria-pressed') == 'true';\n  const url = `${DBHelper.API_URL}/restaurants/${restaurantId}/?is_favorite=${!fav}`;\n  const PUT = { method: 'PUT' };\n\n  // If we are offline\n  if (!navigator.onLine) {\n    console.info('App was offline, when you tried to send fav');\n    dbPromise.putOfflinefav(!fav);\n    this.setAttribute('aria-pressed', !fav);\n\n  } else {\n    // If we are online\n    return fetch(url, PUT).then(response => {\n      return response.json();\n    }).then(updatedRestaurant => {\n      // update restaurant on idb\n      dbPromise.putRestaurants(updatedRestaurant, true);\n      // change state of toggle button\n      this.setAttribute('aria-pressed', !fav);\n      return updatedRestaurant;\n    }).catch((err) => {\n      console.error('Couldnt update fav in API', err);\n    });\n  }\n\n}\n\n\n\nexport default function favoriteButton(restaurant) {\n  const button = document.createElement('button');\n  button.innerHTML = \"&#x2764;\";\n  button.className = \"fav-restaurant\";\n  button.dataset.id = restaurant.id;\n  button.setAttribute('aria-label', `Save ${restaurant.name} as a favorite`);\n  button.setAttribute('aria-pressed', restaurant.is_favorite);\n  button.onclick = handleClick;\n\n  return button;\n}\n","import DBHelper from \"./dbhelper\";\nimport dbPromise from \"./dbpromise\";\n\nfunction handleClick(e) {\n  e.preventDefault();\n\n  const restaurantId = this.dataset.id;\n  const fav = this.getAttribute('aria-pressed') == 'true';\n  const url = `${DBHelper.API_URL}/restaurants/${restaurantId}/?is_favorite=${!fav}`;\n  const PUT = { method: 'PUT' };\n\n  // If we are offline\n  if (!navigator.onLine) {\n    console.info('App was offline, when you tried to send fav');\n    dbPromise.putOfflinefav(!fav);\n    this.setAttribute('aria-pressed', !fav);\n\n  } else {\n    // If we are online\n    return fetch(url, PUT).then(response => {\n      return response.json();\n    }).then(updatedRestaurant => {\n      // update restaurant on idb\n      dbPromise.putRestaurants(updatedRestaurant, true);\n      // change state of toggle button\n      this.setAttribute('aria-pressed', !fav);\n      return updatedRestaurant;\n    }).catch((err) => {\n      console.error('Couldnt update fav in API', err);\n    });\n  }\n\n}\n\n\n\nexport default function favoriteButton(restaurant) {\n  const button = document.createElement('button');\n  button.innerHTML = \"&#x2764;\";\n  button.className = \"fav-restaurant\";\n  button.dataset.id = restaurant.id;\n  button.setAttribute('aria-label', `Save ${restaurant.name} as a favorite`);\n  button.setAttribute('aria-pressed', restaurant.is_favorite);\n  button.onclick = handleClick;\n\n  return button;\n}\n","/*! lozad.js - v1.7.0 - 2018-11-08\r\n* https://github.com/ApoorvSaxena/lozad.js\r\n* Copyright (c) 2018 Apoorv Saxena; Licensed MIT */\r\n!function(t,e){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=e():\"function\"===typeof define&&define.amd?define(e):t.lozad=e()}(this,() => {\"use strict\";var g=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(t[o]=r[o])}return t},r=\"undefined\"!=typeof document&&document.documentMode,l={rootMargin:\"0px\",threshold:0,load:function(t){if(\"picture\"===t.nodeName.toLowerCase()){var e=document.createElement(\"img\");r&&t.getAttribute(\"data-iesrc\")&&(e.src=t.getAttribute(\"data-iesrc\")),t.getAttribute(\"data-alt\")&&(e.alt=t.getAttribute(\"data-alt\")),t.appendChild(e)}t.getAttribute(\"data-src\")&&(t.src=t.getAttribute(\"data-src\")),t.getAttribute(\"data-srcset\")&&t.setAttribute(\"srcset\",t.getAttribute(\"data-srcset\")),t.getAttribute(\"data-background-image\")&&(t.style.backgroundImage=\"url('\"+t.getAttribute(\"data-background-image\")+\"')\"),t.getAttribute(\"data-toggle-class\")&&t.classList.toggle(t.getAttribute(\"data-toggle-class\"))},loaded:function(){}};\r\n/**\r\n   * Detect IE browser\r\n   * @const {boolean}\r\n   * @private\r\n   */function f(t){t.setAttribute(\"data-loaded\",!0)}var b=function(t){return\"true\"===t.getAttribute(\"data-loaded\")};return function(){var r,o,a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:\".lozad\",t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},e=g({},l,t),n=e.root,i=e.rootMargin,d=e.threshold,u=e.load,c=e.loaded,s=void 0;return window.IntersectionObserver&&(s=new IntersectionObserver((r=u,o=c,function(t,e){t.forEach(function(t){(0<t.intersectionRatio||t.isIntersecting)&&(e.unobserve(t.target),b(t.target)||(r(t.target),f(t.target),o(t.target)))})}),{root:n,rootMargin:i,threshold:d})),{observe:function(){for(var t=function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:document;return t instanceof Element?[t]:t instanceof NodeList?t:e.querySelectorAll(t)}(a,n),e=0;e<t.length;e++)b(t[e])||(s?s.observe(t[e]):(u(t[e]),f(t[e]),c(t[e])))},triggerLoad:function(t){b(t)||(u(t),f(t),c(t))},observer:s}}});\r\n","\"use-strict\";\r\n\r\nimport DBHelper from \"./dbhelper\";\r\nimport \"./register\";\r\nimport \"./browser\";\r\nimport \"./favoritebutton\";\r\nimport favoriteButton from \"./favoriteButton\";\r\nimport \"./lozad\";\r\n\r\nlet restaurants, neighborhoods, cuisines;\r\nvar newMap;\r\nvar markers = [];\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener(\"DOMContentLoaded\", event => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n  // const observer = lozad(); // lazy loads elements with default selector as '.lozad'\r\n  // observer.observe();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) {\r\n      // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById(\"neighborhoods-select\");\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement(\"option\");\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    // Aria role needs to be dynamically added too\r\n    option.setAttribute(\"role\", \"option\");\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) {\r\n      // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById(\"cuisines-select\");\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement(\"option\");\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    // Aria role needs to be dynamically added too\r\n    option.setAttribute(\"role\", \"option\");\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nwindow.updateRestaurants = () => {\r\n  const cSelect = document.getElementById(\"cuisines-select\");\r\n  const nSelect = document.getElementById(\"neighborhoods-select\");\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    (error, restaurants) => {\r\n      if (error) {\r\n        // Got an error!\r\n        console.error(error);\r\n      } else {\r\n        resetRestaurants(restaurants);\r\n        fillRestaurantsHTML();\r\n      }\r\n    }\r\n  );\r\n};\r\nconst toggleClass = e => {\r\n  const staticMapEl = document.getElementById(\"map-img\");\r\n  const mapEl = document.getElementById(\"map\");\r\n\r\n  if (mapEl.className === \"hidden\") {\r\n    mapEl.className = \"\";\r\n    staticMapEl.className = \"hidden\";\r\n  } else {\r\n    mapEl.className = \"hidden\";\r\n    // staticMapEl.src=getStaticMapUrl();\r\n    staticMapEl.className = \"\";\r\n  }\r\n};\r\nconst getStaticMapUrl = mark => {\r\n  const baseUrl = \"https://maps.googleapis.com/maps/api/staticmap?\";\r\n  const key = \"AIzaSyA4ISihvtXNswa92tcB_pu30DdB7lHn3c4\";\r\n  const format = \"jpg&\";\r\n  const staticMarkers = ` markers=color:red|40.713829,-73.989667&\r\n                          markers=color:red|40.747143,-73.985414&\r\n                          markers=color:red|40.683555,-73.966393&\r\n                          markers=color:red|40.722216,-73.987501&\r\n                          markers=color:red|40.705089,-73.933585&\r\n                          markers=color:red|40.674925,-74.016162&\r\n                          markers=color:red|40.727397,-73.983645&\r\n                          markers=color:red|40.726584,-74.002082&\r\n                          markers=color:red|40.743797,-73.950652&\r\n                          markers=color:red|40.743394,-73.954235&`;\r\n  const width = 900;\r\n  const height = 400;\r\n  const centerZoomSize = `center=40.722216,-73.987501&zoom=11&size=${width}x${height}&f&`;\r\n\r\n  const url = baseUrl + centerZoomSize + format + staticMarkers + key;\r\n\r\n  return url;\r\n};\r\n\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  newMap = new google.maps.Map(document.getElementById(\"map\"), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n\r\n  // Google map makes a bunch of links that steal focus of a screen reader\r\n  // Going to add an event that sets attribute to all of these items\r\n  const mapEl = document.getElementById(\"map\");\r\n\r\n  mapEl.addEventListener(\"keydown\", () => {\r\n    const mapLinks = mapEl.querySelectorAll(\"a\");\r\n    mapLinks.forEach(link => link.setAttribute(\"tabindex\", \"-1\"));\r\n  });\r\n};\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = restaurants => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById(\"restaurants-list\");\r\n  ul.innerHTML = \"\";\r\n\r\n  // Remove all map markers\r\n  if (markers) {\r\n    markers.forEach(marker => marker.setMap(null));\r\n    markers = [];\r\n  }\r\n  self.restaurants = restaurants;\r\n};\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById(\"restaurants-list\");\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n};\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = restaurant => {\r\n  const li = document.createElement(\"li\");\r\n  const image = document.createElement(\"img\");\r\n  image.className = \"restaurant-img\";\r\n  image.classList.add(\"lozad\");\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.srcset = DBHelper.imageSrcsetForRestaurant(restaurant);\r\n  image.sizes = DBHelper.imageSizesForRestaurant(restaurant);\r\n  image.alt = `${restaurant.name}, promotional image.`;\r\n  li.append(image);\r\n\r\n  const name = document.createElement(\"h2\");\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const fav = favoriteButton(restaurant);\r\n  fav.alt = `Save ${restaurant.name} as a favorite`;\r\n  li.append(fav);\r\n\r\n  const neighborhood = document.createElement(\"p\");\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement(\"p\");\r\n  const addressArray = restaurant.address.split(\",\");\r\n  const cityStateZip = document.createElement(\"p\");\r\n  const more = document.createElement(\"a\");\r\n  const url = DBHelper.urlForRestaurant(restaurant);\r\n\r\n  address.innerHTML = addressArray[0];\r\n  cityStateZip.innerHTML = `${addressArray[1]}, ${addressArray[2]}`;\r\n\r\n  li.append(address);\r\n  li.append(cityStateZip);\r\n\r\n  more.className = \"view-details-btn\";\r\n  more.innerHTML = \"View Details\";\r\n  more.type = \"Button\";\r\n  more.setAttribute(\"role\", \"button\");\r\n  more.setAttribute(\"aria-label\", `View more details about ${restaurant.name}`);\r\n  more.href = url;\r\n  name.addEventListener(\"click\", event => {\r\n    window.location = url;\r\n  });\r\n\r\n  li.setAttribute(\r\n    \"aria-label\",\r\n    `${restaurant.name} is an ${restaurant.cuisine_type} restaurant in ${\r\n      restaurant.neighborhood\r\n    }`\r\n  );\r\n  li.setAttribute(\"tabindex\", \"0\");\r\n\r\n  li.append(more);\r\n\r\n  return li;\r\n};\r\n\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, newMap);\r\n    google.maps.event.addListener(marker, \"click\", () => {\r\n      window.location.href = marker.url;\r\n    });\r\n    markers.push(marker);\r\n  });\r\n};\r\n","const { serviceWorker } = navigator;\r\n\r\nconst registerServiceWorker = () => {\r\n  if (\"serviceWorker\" in navigator) {\r\n    serviceWorker\r\n      .register(\"./sw.js\", { scope: \"./\" })\r\n      .then(registration => {\r\n        console.info(\"Service worker registered\", registration.scope);\r\n        const sw = {};\r\n\r\n        if (registration.installing) {\r\n          sw.status = registration.installing;\r\n          console.info(\"Service worker installing\");\r\n        }\r\n\r\n        if (registration.waiting) {\r\n          sw.status = registration.waiting;\r\n          console.warn(\"Service worker waiting\");\r\n        }\r\n\r\n        if (registration.active) {\r\n          sw.status = registration.active;\r\n          console.info(\"Service worker active\");\r\n        }\r\n\r\n        if ('sync' in  registration) {\r\n            console.info(\"Sync active\");\r\n          }\r\n\r\n        if (sw.status) {\r\n          console.log(\"Service worker state:\", sw.status.state);\r\n          sw.status.addEventListener(\"statechange\", e => {\r\n            console.log(\"Service worker state:\", e.target.state);\r\n          });\r\n        }\r\n        return null;\r\n      })\r\n      .catch(err => {\r\n        console.error(\"Service worker installation failed\", err);\r\n        // loadPage();\r\n      });\r\n  }\r\n\r\n  // If you end up here serviceworker is not supported\r\n  //loadPage();\r\n};\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", event => {\r\n  registerServiceWorker();\r\n});\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}