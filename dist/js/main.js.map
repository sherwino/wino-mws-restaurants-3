{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/idb/lib/idb.js","src/js/browser.js","src/js/dbhelper.js","src/js/dbpromise.js","src/js/favoriteButton.js","src/js/favoritebutton.js","src/js/main.js","src/js/register.js"],"names":[],"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","file":"main.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","let usersBrowser;\r\nconst { userAgent } = navigator;\r\n\r\n// The order matters here, and this may report false positives for unlisted browsers.\r\nif (userAgent.indexOf('Firefox') > -1) {\r\n    usersBrowser = 'Mozilla Firefox';\r\n} else if (userAgent.indexOf('Opera') > -1) {\r\n    usersBrowser = 'Opera';\r\n} else if (userAgent.indexOf('Trident') > -1) {\r\n    usersBrowser = 'Microsoft Internet Explorer';\r\n} else if (userAgent.indexOf('Edge') > -1) {\r\n    usersBrowser = 'Microsoft Edge';\r\n} else if (userAgent.indexOf('Chrome') > -1) {\r\n    usersBrowser = 'Google Chrome or Chromium';\r\n} else if (userAgent.indexOf('Safari') > -1) {\r\n    usersBrowser = 'Apple Safari';\r\n} else {\r\n    usersBrowser = 'unknown';\r\n}\r\n\r\nconsole.log(`You are using: ${usersBrowser}`);\r\n","import dbPromise from \"./dbpromise\";\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nexport default class DBHelper {\r\n  /**\r\n   * API URL\r\n   */\r\n  static get API_URL() {\r\n    const port = 1337; // port where sails server will listen.\r\n\r\n    const heroku = 'https://winosails.herokuapp.com';\r\n    const isLocalHost = () => {\r\n      if (window.location.hostname.includes(\"localhost\")) {\r\n        return `http://localhost:${port}`;\r\n      }\r\n    };\r\n\r\n    const url = isLocalHost() || heroku;\r\n\r\n    return url;\r\n  }\r\n\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open(\"GET\", `${DBHelper.API_URL}/restaurants`);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) {\r\n        const restaurants = JSON.parse(xhr.responseText);\r\n        dbPromise.putRestaurants(restaurants);\r\n        callback(null, restaurants);\r\n      } else {\r\n        // Oops!. Got an error from server.\r\n        console.log(\r\n          `Request failed. Returned status of ${xhr.status}, trying idb...`\r\n        );\r\n        // if xhr request isn't code 200, try idb\r\n        dbPromise.getRestaurants().then(idbRestaurants => {\r\n          if (idbRestaurants.length) {\r\n            callback(null, idbRestaurants);\r\n          } else {\r\n            callback(\"No restaurants found in idb\", null);\r\n          }\r\n        });\r\n      }\r\n    };\r\n    // XHR needs error handling for when server is down (doesn't respond or sends back codes)\r\n    xhr.onerror = () => {\r\n      console.log(\"Error while trying XHR, trying idb...\");\r\n      // try idb, and if we get restaurants back, return them, otherwise return an error\r\n      dbPromise.getRestaurants().then(idbRestaurants => {\r\n        if (idbRestaurants.length) {\r\n          callback(null, idbRestaurants);\r\n        } else {\r\n          callback(\"No restaurants found in idb\", null);\r\n        }\r\n      });\r\n    };\r\n    xhr.send();\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    fetch(`${DBHelper.API_URL}/restaurants/${id}`)\r\n      .then(response => {\r\n        if (!response.ok)\r\n          return Promise.reject(\"Restaurant couldn't be fetched from network\");\r\n        return response.json();\r\n      })\r\n      .then(fetchedRestaurant => {\r\n        // if restaurant could be fetched from network:\r\n        dbPromise.putRestaurants(fetchedRestaurant);\r\n        return callback(null, fetchedRestaurant);\r\n      })\r\n      .catch(networkError => {\r\n        // if restaurant couldn't be fetched from network:\r\n        console.log(`${networkError}, trying idb.`);\r\n        dbPromise.getRestaurants(id).then(idbRestaurant => {\r\n          if (!idbRestaurant)\r\n            return callback(\"Restaurant not found in idb either\", null);\r\n          return callback(null, idbRestaurant);\r\n        });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurant reviews by restaurant id.\r\n   */\r\n  static fetchsReviewsByRestaurantId(id) {\r\n    return fetch(`${DBHelper.API_URL}/reviews/?restaurant_id=${id}`)\r\n      .then(response => {\r\n        if (!response.ok)\r\n          return Promise.reject(\"Reviews couldn't be fetched from network\");\r\n        return response.json();\r\n      })\r\n      .then(fetchedReviews => {\r\n        dbPromise.putReviews(fetchedReviews);\r\n        return fetchedReviews;\r\n      })\r\n      .catch(networkError => {\r\n        console.log(`${networkError}`);\r\n        return dbPromise.getReviewsForRestaurant(id)\r\n        .then(idbReviews => {\r\n          if(!idbReviews.length) return null;\r\n          return idbReviews;\r\n        });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    callback\r\n  ) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != \"all\") {\r\n          // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != \"all\") {\r\n          // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map(\r\n          (v, i) => restaurants[i].neighborhood\r\n        );\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter(\r\n          (v, i) => neighborhoods.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter(\r\n          (v, i) => cuisines.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return `./restaurant.html?id=${restaurant.id}`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n      const url = `./img/${restaurant.photograph || restaurant.id}-medium.jpg`;\r\n  \r\n    return url;\r\n  }\r\n\r\n  /**\r\n   * Restaurant srcset attribute for browser to decide best resolution. It uses restaurant.photograph\r\n   * and fallbacks to restaurant.id if former is missing.\r\n   */\r\n  static imageSrcsetForRestaurant(restaurant) {\r\n    const imageSrc = `./img/${restaurant.photograph || restaurant.id}`;\r\n    return `${imageSrc}-small.jpg 300w,\r\n            ${imageSrc}-medium.jpg 600w,\r\n            ${imageSrc}-large.jpg 800w`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant sizes attribute so browser knows image sizes before deciding\r\n   * what image to download.\r\n   */\r\n  static imageSizesForRestaurant(restaurant) {\r\n    return `(max-width: 360px) 280px,\r\n            (max-width: 600px) 600px,\r\n            400px`;\r\n  }\r\n\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n    return marker;\r\n  }\r\n}\r\n","import idb from \"idb\";\n\nconst dbPromise = {\n  // creation and updating of database happens here.\n  db: idb.open(\"restaurant-reviews-db\", 3, function(upgradeDb) {\n    switch (upgradeDb.oldVersion) {\n      case 0:\n        upgradeDb.createObjectStore(\"restaurants\", { keyPath: \"id\" });\n      case 1:\n        upgradeDb\n          .createObjectStore(\"reviews\", { keyPath: \"id\" })\n          .createIndex(\"restaurant_id\", \"restaurant_id\");\n      case 2:\n        upgradeDb\n          .createObjectStore(\"offline\", { autoIncrement: true, keyPath: \"id\" })\n          .createIndex(\"restaurant_id\", \"restaurant_id\");\n    }\n  }),\n\n  /**\n   * Save restaurant\n   */\n  putRestaurants(restaurants, forceUpdate = false) {\n    if (!restaurants.push) restaurants = [restaurants];\n    return this.db.then(db => {\n      const store = db\n        .transaction(\"restaurants\", \"readwrite\")\n        .objectStore(\"restaurants\");\n      Promise.all(\n        restaurants.map(apiRestaurant => {\n          return store.get(apiRestaurant.id).then(idbRestaurant => {\n            if (forceUpdate) return store.put(apiRestaurant);\n            if (!idbRestaurant || new Date(apiRestaurant.updatedAt) > new Date(idbRestaurant.updatedAt)) {\n              return store.put(apiRestaurant);\n            }\n          });\n        })\n      ).then(function() {\n        return store.complete;\n      });\n    });\n  },\n\n  /**\n   * Get restaurant\n   */\n  getRestaurants(id = undefined) {\n    return this.db.then(db => {\n      const store = db.transaction(\"restaurants\").objectStore(\"restaurants\");\n      if (id) return store.get(Number(id));\n      return store.getAll();\n    });\n  },\n\n  /**\n   * Save reviews\n   */\n  putReviews(reviews) {\n    if (!reviews.push) reviews = [reviews];\n    return this.db.then(db => {\n      const store = db\n        .transaction(\"reviews\", \"readwrite\")\n        .objectStore(\"reviews\");\n      Promise.all(\n        reviews.map(apiReview => {\n          return store.get(apiReview.id).then(idbReview => {\n            if (\n              !idbReview ||\n              new Date(apiReview.updatedAt) > new Date(idbReview.updatedAt)\n            ) {\n              return store.put(apiReview);\n            }\n          });\n        })\n      ).then(function() {\n        return store.complete;\n      });\n    });\n  },\n\n  getReviewsForRestaurant(id) {\n    return this.db.then(db => {\n      const storeIndex = db\n        .transaction(\"reviews\")\n        .objectStore(\"reviews\")\n        .index(\"restaurant_id\");\n      return storeIndex.getAll(Number(id));\n    });\n  }\n};\n\nexport default dbPromise;\n","import DBHelper from \"./dbhelper\";\nimport dbPromise from \"./dbpromise\";\n\nfunction handleClick() {\n  const restaurantId = this.dataset.id;\n  const fav = this.getAttribute('aria-pressed') == 'true';\n  const url = `${DBHelper.API_URL}/restaurants/${restaurantId}/?is_favorite=${!fav}`;\n  const PUT = {method: 'PUT'};\n\n  // TODO: use Background Sync to sync data with API server\n  return fetch(url, PUT).then(response => {\n    if (!response.ok) return Promise.reject(\"We couldn't mark restaurant as favorite.\");\n    return response.json();\n  }).then(updatedRestaurant => {\n    // update restaurant on idb\n    dbPromise.putRestaurants(updatedRestaurant, true);\n    // change state of toggle button\n    this.setAttribute('aria-pressed', !fav);\n  });\n}\n\n\nexport default function favoriteButton(restaurant) {\n  const button = document.createElement('button');\n  button.innerHTML = \"&#x2764;\"; // this is the heart symbol in hex code\n  button.className = \"fav\"; // you can use this class name to style your button\n  button.dataset.id = restaurant.id; // store restaurant id in dataset for later\n  button.setAttribute('aria-label', `Mark ${restaurant.name} as a favorite`);\n  button.setAttribute('aria-pressed', restaurant.is_favorite);\n  button.onclick = handleClick;\n\n  return button;\n}","import DBHelper from \"./dbhelper\";\nimport dbPromise from \"./dbpromise\";\n\nfunction handleClick() {\n  const restaurantId = this.dataset.id;\n  const fav = this.getAttribute('aria-pressed') == 'true';\n  const url = `${DBHelper.API_URL}/restaurants/${restaurantId}/?is_favorite=${!fav}`;\n  const PUT = {method: 'PUT'};\n\n  // TODO: use Background Sync to sync data with API server\n  return fetch(url, PUT).then(response => {\n    if (!response.ok) return Promise.reject(\"We couldn't mark restaurant as favorite.\");\n    return response.json();\n  }).then(updatedRestaurant => {\n    // update restaurant on idb\n    dbPromise.putRestaurants(updatedRestaurant, true);\n    // change state of toggle button\n    this.setAttribute('aria-pressed', !fav);\n  });\n}\n\n\nexport default function favoriteButton(restaurant) {\n  const button = document.createElement('button');\n  button.innerHTML = \"&#x2764;\"; // this is the heart symbol in hex code\n  button.className = \"fav\"; // you can use this class name to style your button\n  button.dataset.id = restaurant.id; // store restaurant id in dataset for later\n  button.setAttribute('aria-label', `Mark ${restaurant.name} as a favorite`);\n  button.setAttribute('aria-pressed', restaurant.is_favorite);\n  button.onclick = handleClick;\n\n  return button;\n}","'use-strict';\r\n\r\nimport DBHelper from './dbhelper';\r\nimport './register';\r\nimport './browser';\r\nimport './favoritebutton';\r\nimport favoriteButton from './favoriteButton';\r\n\r\n\r\nlet restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar newMap\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    // Aria role needs to be dynamically added too\r\n    option.setAttribute('role', 'option'); \r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n        // Aria role needs to be dynamically added too\r\n        option.setAttribute('role', 'option'); \r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nwindow.updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  newMap = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n\r\n// Google map makes a bunch of links that steal focus of a screen reader\r\n// Going to add an event that sets attribute to all of these items\r\nconst mapEl = document.getElementById('map');\r\nmapEl.addEventListener(\"keydown\", () => {\r\n  const mapLinks = mapEl.querySelectorAll('a');\r\n  mapLinks.forEach(link => link.setAttribute('tabindex', '-1'));\r\n});\r\n  \r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if (markers) {\r\n    markers.forEach(marker => marker.setMap(null));\r\n    markers = [];\r\n  }\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.srcset = DBHelper.imageSrcsetForRestaurant(restaurant);\r\n  image.sizes = DBHelper.imageSizesForRestaurant(restaurant);\r\n  image.alt = `${restaurant.name}, promotional image.`;\r\n  li.append(image);\r\n\r\n  const name = document.createElement('h2');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const fav = favoriteButton(restaurant);\r\n  fav.alt = `Save ${restaurant.name} as a favorite`;\r\n  fav.className = 'fav-restaurant';\r\n  li.append(fav);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  const addressArray = restaurant.address.split(',')\r\n  const cityStateZip = document.createElement('p');\r\n  const more = document.createElement('a');\r\n  const url = DBHelper.urlForRestaurant(restaurant);\r\n  \r\n  address.innerHTML = addressArray[0];\r\n  cityStateZip.innerHTML = `${addressArray[1]}, ${addressArray[2]}`;\r\n\r\n  li.append(address);\r\n  li.append(cityStateZip);\r\n\r\n  more.className = 'view-details-btn';\r\n  more.innerHTML = 'View Details';\r\n  more.type = 'Button'\r\n  more.setAttribute('role', 'button');\r\n  more.setAttribute('aria-label', `View more details about ${restaurant.name}`)\r\n  more.href = url;\r\n  li.addEventListener('click', (event) => {\r\n    window.location = url;\r\n  });\r\n\r\n  li.setAttribute('aria-label', \r\n  `${restaurant.name} is an ${restaurant.cuisine_type} restaurant in ${restaurant.neighborhood}`\r\n  )\r\n  li.setAttribute('tabindex', '0');\r\n  \r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, newMap);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    markers.push(marker);\r\n  });\r\n}\r\n\r\n","const { serviceWorker } = navigator;\r\n\r\nconst registerServiceWorker = () => {\r\n  if (\"serviceWorker\" in navigator) {\r\n    serviceWorker\r\n      .register(\"./sw.js\", { scope: \"./\" })\r\n      .then(registration => {\r\n        console.info(\"Service worker registered\", registration.scope);\r\n        const sw = {};\r\n\r\n        if (registration.installing) {\r\n          sw.status = registration.installing;\r\n          console.info(\"Service worker installing\");\r\n        }\r\n\r\n        if (registration.waiting) {\r\n          sw.status = registration.waiting;\r\n          console.warn(\"Service worker waiting\");\r\n        }\r\n\r\n        if (registration.active) {\r\n          sw.status = registration.active;\r\n          console.info(\"Service worker active\");\r\n        }\r\n\r\n        if ('sync' in  registration) {\r\n            console.info(\"Sync active\");\r\n          }\r\n\r\n        if (sw.status) {\r\n          console.log(\"Service worker state:\", sw.status.state);\r\n          sw.status.addEventListener(\"statechange\", e => {\r\n            console.log(\"Service worker state:\", e.target.state);\r\n          });\r\n        }\r\n        return null;\r\n      })\r\n      .catch(err => {\r\n        console.error(\"Service worker installation failed\", err);\r\n        // loadPage();\r\n      });\r\n  }\r\n\r\n  // If you end up here serviceworker is not supported\r\n  //loadPage();\r\n};\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", event => {\r\n  registerServiceWorker();\r\n});\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvaWRiL2xpYi9pZGIuanMiLCJzcmMvanMvYnJvd3Nlci5qcyIsInNyYy9qcy9kYmhlbHBlci5qcyIsInNyYy9qcy9kYnByb21pc2UuanMiLCJzcmMvanMvZmF2b3JpdGVCdXR0b24uanMiLCJzcmMvanMvZmF2b3JpdGVidXR0b24uanMiLCJzcmMvanMvbWFpbi5qcyIsInNyYy9qcy9yZWdpc3Rlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUgsR0FBWSxZQUFZLENBQUMsTUFBekI7QUFDQSxRQUFBLE9BQU8sQ0FBQyxJQUFSLENBQWEsdUJBQWI7QUFDRDs7QUFFRCxVQUFJLFVBQVcsWUFBZixFQUE2QjtBQUN6QixRQUFBLE9BQU8sQ0FBQyxJQUFSLENBQWEsYUFBYjtBQUNEOztBQUVILFVBQUksRUFBRSxDQUFDLE1BQVAsRUFBZTtBQUNiLFFBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSx1QkFBWixFQUFxQyxFQUFFLENBQUMsTUFBSCxDQUFVLEtBQS9DO0FBQ0EsUUFBQSxFQUFFLENBQUMsTUFBSCxDQUFVLGdCQUFWLENBQTJCLGFBQTNCLEVBQTBDLFVBQUEsQ0FBQyxFQUFJO0FBQzdDLFVBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSx1QkFBWixFQUFxQyxDQUFDLENBQUMsTUFBRixDQUFTLEtBQTlDO0FBQ0QsU0FGRDtBQUdEOztBQUNELGFBQU8sSUFBUDtBQUNELEtBaENILEVBaUNHLEtBakNILENBaUNTLFVBQUEsR0FBRyxFQUFJO0FBQ1osTUFBQSxPQUFPLENBQUMsS0FBUixDQUFjLG9DQUFkLEVBQW9ELEdBQXBELEVBRFksQ0FFWjtBQUNELEtBcENIO0FBcUNELEdBdkNpQyxDQXlDbEM7QUFDQTs7QUFDRCxDQTNDRDs7QUE2Q0EsUUFBUSxDQUFDLGdCQUFULENBQTBCLGtCQUExQixFQUE4QyxVQUFBLEtBQUssRUFBSTtBQUNyRCxFQUFBLHFCQUFxQjtBQUN0QixDQUZEIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHRvQXJyYXkoYXJyKSB7XG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycik7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNvbHZlKHJlcXVlc3QucmVzdWx0KTtcbiAgICAgIH07XG5cbiAgICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QocmVxdWVzdC5lcnJvcik7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvbWlzaWZ5UmVxdWVzdENhbGwob2JqLCBtZXRob2QsIGFyZ3MpIHtcbiAgICB2YXIgcmVxdWVzdDtcbiAgICB2YXIgcCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcmVxdWVzdCA9IG9ialttZXRob2RdLmFwcGx5KG9iaiwgYXJncyk7XG4gICAgICBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9KTtcblxuICAgIHAucmVxdWVzdCA9IHJlcXVlc3Q7XG4gICAgcmV0dXJuIHA7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9taXNpZnlDdXJzb3JSZXF1ZXN0Q2FsbChvYmosIG1ldGhvZCwgYXJncykge1xuICAgIHZhciBwID0gcHJvbWlzaWZ5UmVxdWVzdENhbGwob2JqLCBtZXRob2QsIGFyZ3MpO1xuICAgIHJldHVybiBwLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHJldHVybjtcbiAgICAgIHJldHVybiBuZXcgQ3Vyc29yKHZhbHVlLCBwLnJlcXVlc3QpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJveHlQcm9wZXJ0aWVzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIHByb3BlcnRpZXMpIHtcbiAgICBwcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24ocHJvcCkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFByb3h5Q2xhc3MucHJvdG90eXBlLCBwcm9wLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXNbdGFyZ2V0UHJvcF1bcHJvcF07XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgdGhpc1t0YXJnZXRQcm9wXVtwcm9wXSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm94eVJlcXVlc3RNZXRob2RzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIENvbnN0cnVjdG9yLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIGlmICghKHByb3AgaW4gQ29uc3RydWN0b3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgICAgUHJveHlDbGFzcy5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3RDYWxsKHRoaXNbdGFyZ2V0UHJvcF0sIHByb3AsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJveHlNZXRob2RzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIENvbnN0cnVjdG9yLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIGlmICghKHByb3AgaW4gQ29uc3RydWN0b3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgICAgUHJveHlDbGFzcy5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdGFyZ2V0UHJvcF1bcHJvcF0uYXBwbHkodGhpc1t0YXJnZXRQcm9wXSwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm94eUN1cnNvclJlcXVlc3RNZXRob2RzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIENvbnN0cnVjdG9yLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIGlmICghKHByb3AgaW4gQ29uc3RydWN0b3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgICAgUHJveHlDbGFzcy5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeUN1cnNvclJlcXVlc3RDYWxsKHRoaXNbdGFyZ2V0UHJvcF0sIHByb3AsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gSW5kZXgoaW5kZXgpIHtcbiAgICB0aGlzLl9pbmRleCA9IGluZGV4O1xuICB9XG5cbiAgcHJveHlQcm9wZXJ0aWVzKEluZGV4LCAnX2luZGV4JywgW1xuICAgICduYW1lJyxcbiAgICAna2V5UGF0aCcsXG4gICAgJ211bHRpRW50cnknLFxuICAgICd1bmlxdWUnXG4gIF0pO1xuXG4gIHByb3h5UmVxdWVzdE1ldGhvZHMoSW5kZXgsICdfaW5kZXgnLCBJREJJbmRleCwgW1xuICAgICdnZXQnLFxuICAgICdnZXRLZXknLFxuICAgICdnZXRBbGwnLFxuICAgICdnZXRBbGxLZXlzJyxcbiAgICAnY291bnQnXG4gIF0pO1xuXG4gIHByb3h5Q3Vyc29yUmVxdWVzdE1ldGhvZHMoSW5kZXgsICdfaW5kZXgnLCBJREJJbmRleCwgW1xuICAgICdvcGVuQ3Vyc29yJyxcbiAgICAnb3BlbktleUN1cnNvcidcbiAgXSk7XG5cbiAgZnVuY3Rpb24gQ3Vyc29yKGN1cnNvciwgcmVxdWVzdCkge1xuICAgIHRoaXMuX2N1cnNvciA9IGN1cnNvcjtcbiAgICB0aGlzLl9yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgfVxuXG4gIHByb3h5UHJvcGVydGllcyhDdXJzb3IsICdfY3Vyc29yJywgW1xuICAgICdkaXJlY3Rpb24nLFxuICAgICdrZXknLFxuICAgICdwcmltYXJ5S2V5JyxcbiAgICAndmFsdWUnXG4gIF0pO1xuXG4gIHByb3h5UmVxdWVzdE1ldGhvZHMoQ3Vyc29yLCAnX2N1cnNvcicsIElEQkN1cnNvciwgW1xuICAgICd1cGRhdGUnLFxuICAgICdkZWxldGUnXG4gIF0pO1xuXG4gIC8vIHByb3h5ICduZXh0JyBtZXRob2RzXG4gIFsnYWR2YW5jZScsICdjb250aW51ZScsICdjb250aW51ZVByaW1hcnlLZXknXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICBpZiAoIShtZXRob2ROYW1lIGluIElEQkN1cnNvci5wcm90b3R5cGUpKSByZXR1cm47XG4gICAgQ3Vyc29yLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGN1cnNvciA9IHRoaXM7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICBjdXJzb3IuX2N1cnNvclttZXRob2ROYW1lXS5hcHBseShjdXJzb3IuX2N1cnNvciwgYXJncyk7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KGN1cnNvci5fcmVxdWVzdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGlmICghdmFsdWUpIHJldHVybjtcbiAgICAgICAgICByZXR1cm4gbmV3IEN1cnNvcih2YWx1ZSwgY3Vyc29yLl9yZXF1ZXN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9KTtcblxuICBmdW5jdGlvbiBPYmplY3RTdG9yZShzdG9yZSkge1xuICAgIHRoaXMuX3N0b3JlID0gc3RvcmU7XG4gIH1cblxuICBPYmplY3RTdG9yZS5wcm90b3R5cGUuY3JlYXRlSW5kZXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IEluZGV4KHRoaXMuX3N0b3JlLmNyZWF0ZUluZGV4LmFwcGx5KHRoaXMuX3N0b3JlLCBhcmd1bWVudHMpKTtcbiAgfTtcblxuICBPYmplY3RTdG9yZS5wcm90b3R5cGUuaW5kZXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IEluZGV4KHRoaXMuX3N0b3JlLmluZGV4LmFwcGx5KHRoaXMuX3N0b3JlLCBhcmd1bWVudHMpKTtcbiAgfTtcblxuICBwcm94eVByb3BlcnRpZXMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBbXG4gICAgJ25hbWUnLFxuICAgICdrZXlQYXRoJyxcbiAgICAnaW5kZXhOYW1lcycsXG4gICAgJ2F1dG9JbmNyZW1lbnQnXG4gIF0pO1xuXG4gIHByb3h5UmVxdWVzdE1ldGhvZHMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBJREJPYmplY3RTdG9yZSwgW1xuICAgICdwdXQnLFxuICAgICdhZGQnLFxuICAgICdkZWxldGUnLFxuICAgICdjbGVhcicsXG4gICAgJ2dldCcsXG4gICAgJ2dldEFsbCcsXG4gICAgJ2dldEtleScsXG4gICAgJ2dldEFsbEtleXMnLFxuICAgICdjb3VudCdcbiAgXSk7XG5cbiAgcHJveHlDdXJzb3JSZXF1ZXN0TWV0aG9kcyhPYmplY3RTdG9yZSwgJ19zdG9yZScsIElEQk9iamVjdFN0b3JlLCBbXG4gICAgJ29wZW5DdXJzb3InLFxuICAgICdvcGVuS2V5Q3Vyc29yJ1xuICBdKTtcblxuICBwcm94eU1ldGhvZHMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBJREJPYmplY3RTdG9yZSwgW1xuICAgICdkZWxldGVJbmRleCdcbiAgXSk7XG5cbiAgZnVuY3Rpb24gVHJhbnNhY3Rpb24oaWRiVHJhbnNhY3Rpb24pIHtcbiAgICB0aGlzLl90eCA9IGlkYlRyYW5zYWN0aW9uO1xuICAgIHRoaXMuY29tcGxldGUgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlkYlRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfTtcbiAgICAgIGlkYlRyYW5zYWN0aW9uLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KGlkYlRyYW5zYWN0aW9uLmVycm9yKTtcbiAgICAgIH07XG4gICAgICBpZGJUcmFuc2FjdGlvbi5vbmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChpZGJUcmFuc2FjdGlvbi5lcnJvcik7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLm9iamVjdFN0b3JlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBPYmplY3RTdG9yZSh0aGlzLl90eC5vYmplY3RTdG9yZS5hcHBseSh0aGlzLl90eCwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgcHJveHlQcm9wZXJ0aWVzKFRyYW5zYWN0aW9uLCAnX3R4JywgW1xuICAgICdvYmplY3RTdG9yZU5hbWVzJyxcbiAgICAnbW9kZSdcbiAgXSk7XG5cbiAgcHJveHlNZXRob2RzKFRyYW5zYWN0aW9uLCAnX3R4JywgSURCVHJhbnNhY3Rpb24sIFtcbiAgICAnYWJvcnQnXG4gIF0pO1xuXG4gIGZ1bmN0aW9uIFVwZ3JhZGVEQihkYiwgb2xkVmVyc2lvbiwgdHJhbnNhY3Rpb24pIHtcbiAgICB0aGlzLl9kYiA9IGRiO1xuICAgIHRoaXMub2xkVmVyc2lvbiA9IG9sZFZlcnNpb247XG4gICAgdGhpcy50cmFuc2FjdGlvbiA9IG5ldyBUcmFuc2FjdGlvbih0cmFuc2FjdGlvbik7XG4gIH1cblxuICBVcGdyYWRlREIucHJvdG90eXBlLmNyZWF0ZU9iamVjdFN0b3JlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBPYmplY3RTdG9yZSh0aGlzLl9kYi5jcmVhdGVPYmplY3RTdG9yZS5hcHBseSh0aGlzLl9kYiwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgcHJveHlQcm9wZXJ0aWVzKFVwZ3JhZGVEQiwgJ19kYicsIFtcbiAgICAnbmFtZScsXG4gICAgJ3ZlcnNpb24nLFxuICAgICdvYmplY3RTdG9yZU5hbWVzJ1xuICBdKTtcblxuICBwcm94eU1ldGhvZHMoVXBncmFkZURCLCAnX2RiJywgSURCRGF0YWJhc2UsIFtcbiAgICAnZGVsZXRlT2JqZWN0U3RvcmUnLFxuICAgICdjbG9zZSdcbiAgXSk7XG5cbiAgZnVuY3Rpb24gREIoZGIpIHtcbiAgICB0aGlzLl9kYiA9IGRiO1xuICB9XG5cbiAgREIucHJvdG90eXBlLnRyYW5zYWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBUcmFuc2FjdGlvbih0aGlzLl9kYi50cmFuc2FjdGlvbi5hcHBseSh0aGlzLl9kYiwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgcHJveHlQcm9wZXJ0aWVzKERCLCAnX2RiJywgW1xuICAgICduYW1lJyxcbiAgICAndmVyc2lvbicsXG4gICAgJ29iamVjdFN0b3JlTmFtZXMnXG4gIF0pO1xuXG4gIHByb3h5TWV0aG9kcyhEQiwgJ19kYicsIElEQkRhdGFiYXNlLCBbXG4gICAgJ2Nsb3NlJ1xuICBdKTtcblxuICAvLyBBZGQgY3Vyc29yIGl0ZXJhdG9yc1xuICAvLyBUT0RPOiByZW1vdmUgdGhpcyBvbmNlIGJyb3dzZXJzIGRvIHRoZSByaWdodCB0aGluZyB3aXRoIHByb21pc2VzXG4gIFsnb3BlbkN1cnNvcicsICdvcGVuS2V5Q3Vyc29yJ10uZm9yRWFjaChmdW5jdGlvbihmdW5jTmFtZSkge1xuICAgIFtPYmplY3RTdG9yZSwgSW5kZXhdLmZvckVhY2goZnVuY3Rpb24oQ29uc3RydWN0b3IpIHtcbiAgICAgIC8vIERvbid0IGNyZWF0ZSBpdGVyYXRlS2V5Q3Vyc29yIGlmIG9wZW5LZXlDdXJzb3IgZG9lc24ndCBleGlzdC5cbiAgICAgIGlmICghKGZ1bmNOYW1lIGluIENvbnN0cnVjdG9yLnByb3RvdHlwZSkpIHJldHVybjtcblxuICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlW2Z1bmNOYW1lLnJlcGxhY2UoJ29wZW4nLCAnaXRlcmF0ZScpXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuICAgICAgICB2YXIgbmF0aXZlT2JqZWN0ID0gdGhpcy5fc3RvcmUgfHwgdGhpcy5faW5kZXg7XG4gICAgICAgIHZhciByZXF1ZXN0ID0gbmF0aXZlT2JqZWN0W2Z1bmNOYW1lXS5hcHBseShuYXRpdmVPYmplY3QsIGFyZ3Muc2xpY2UoMCwgLTEpKTtcbiAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBjYWxsYmFjayhyZXF1ZXN0LnJlc3VsdCk7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBwb2x5ZmlsbCBnZXRBbGxcbiAgW0luZGV4LCBPYmplY3RTdG9yZV0uZm9yRWFjaChmdW5jdGlvbihDb25zdHJ1Y3Rvcikge1xuICAgIGlmIChDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZ2V0QWxsKSByZXR1cm47XG4gICAgQ29uc3RydWN0b3IucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uKHF1ZXJ5LCBjb3VudCkge1xuICAgICAgdmFyIGluc3RhbmNlID0gdGhpcztcbiAgICAgIHZhciBpdGVtcyA9IFtdO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgICBpbnN0YW5jZS5pdGVyYXRlQ3Vyc29yKHF1ZXJ5LCBmdW5jdGlvbihjdXJzb3IpIHtcbiAgICAgICAgICBpZiAoIWN1cnNvcikge1xuICAgICAgICAgICAgcmVzb2x2ZShpdGVtcyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGl0ZW1zLnB1c2goY3Vyc29yLnZhbHVlKTtcblxuICAgICAgICAgIGlmIChjb3VudCAhPT0gdW5kZWZpbmVkICYmIGl0ZW1zLmxlbmd0aCA9PSBjb3VudCkge1xuICAgICAgICAgICAgcmVzb2x2ZShpdGVtcyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnNvci5jb250aW51ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0pO1xuXG4gIHZhciBleHAgPSB7XG4gICAgb3BlbjogZnVuY3Rpb24obmFtZSwgdmVyc2lvbiwgdXBncmFkZUNhbGxiYWNrKSB7XG4gICAgICB2YXIgcCA9IHByb21pc2lmeVJlcXVlc3RDYWxsKGluZGV4ZWREQiwgJ29wZW4nLCBbbmFtZSwgdmVyc2lvbl0pO1xuICAgICAgdmFyIHJlcXVlc3QgPSBwLnJlcXVlc3Q7XG5cbiAgICAgIGlmIChyZXF1ZXN0KSB7XG4gICAgICAgIHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICBpZiAodXBncmFkZUNhbGxiYWNrKSB7XG4gICAgICAgICAgICB1cGdyYWRlQ2FsbGJhY2sobmV3IFVwZ3JhZGVEQihyZXF1ZXN0LnJlc3VsdCwgZXZlbnQub2xkVmVyc2lvbiwgcmVxdWVzdC50cmFuc2FjdGlvbikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHAudGhlbihmdW5jdGlvbihkYikge1xuICAgICAgICByZXR1cm4gbmV3IERCKGRiKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZGVsZXRlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdENhbGwoaW5kZXhlZERCLCAnZGVsZXRlRGF0YWJhc2UnLCBbbmFtZV0pO1xuICAgIH1cbiAgfTtcblxuICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGV4cDtcbiAgICBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gbW9kdWxlLmV4cG9ydHM7XG4gIH1cbiAgZWxzZSB7XG4gICAgc2VsZi5pZGIgPSBleHA7XG4gIH1cbn0oKSk7XG4iLCJsZXQgdXNlcnNCcm93c2VyO1xyXG5jb25zdCB7IHVzZXJBZ2VudCB9ID0gbmF2aWdhdG9yO1xyXG5cclxuLy8gVGhlIG9yZGVyIG1hdHRlcnMgaGVyZSwgYW5kIHRoaXMgbWF5IHJlcG9ydCBmYWxzZSBwb3NpdGl2ZXMgZm9yIHVubGlzdGVkIGJyb3dzZXJzLlxyXG5pZiAodXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA+IC0xKSB7XHJcbiAgICB1c2Vyc0Jyb3dzZXIgPSAnTW96aWxsYSBGaXJlZm94JztcclxufSBlbHNlIGlmICh1c2VyQWdlbnQuaW5kZXhPZignT3BlcmEnKSA+IC0xKSB7XHJcbiAgICB1c2Vyc0Jyb3dzZXIgPSAnT3BlcmEnO1xyXG59IGVsc2UgaWYgKHVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPiAtMSkge1xyXG4gICAgdXNlcnNCcm93c2VyID0gJ01pY3Jvc29mdCBJbnRlcm5ldCBFeHBsb3Jlcic7XHJcbn0gZWxzZSBpZiAodXNlckFnZW50LmluZGV4T2YoJ0VkZ2UnKSA+IC0xKSB7XHJcbiAgICB1c2Vyc0Jyb3dzZXIgPSAnTWljcm9zb2Z0IEVkZ2UnO1xyXG59IGVsc2UgaWYgKHVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUnKSA+IC0xKSB7XHJcbiAgICB1c2Vyc0Jyb3dzZXIgPSAnR29vZ2xlIENocm9tZSBvciBDaHJvbWl1bSc7XHJcbn0gZWxzZSBpZiAodXNlckFnZW50LmluZGV4T2YoJ1NhZmFyaScpID4gLTEpIHtcclxuICAgIHVzZXJzQnJvd3NlciA9ICdBcHBsZSBTYWZhcmknO1xyXG59IGVsc2Uge1xyXG4gICAgdXNlcnNCcm93c2VyID0gJ3Vua25vd24nO1xyXG59XHJcblxyXG5jb25zb2xlLmxvZyhgWW91IGFyZSB1c2luZzogJHt1c2Vyc0Jyb3dzZXJ9YCk7XHJcbiIsImltcG9ydCBkYlByb21pc2UgZnJvbSBcIi4vZGJwcm9taXNlXCI7XHJcblxyXG4vKipcclxuICogQ29tbW9uIGRhdGFiYXNlIGhlbHBlciBmdW5jdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEQkhlbHBlciB7XHJcbiAgLyoqXHJcbiAgICogQVBJIFVSTFxyXG4gICAqL1xyXG4gIHN0YXRpYyBnZXQgQVBJX1VSTCgpIHtcclxuICAgIGNvbnN0IHBvcnQgPSAxMzM3OyAvLyBwb3J0IHdoZXJlIHNhaWxzIHNlcnZlciB3aWxsIGxpc3Rlbi5cclxuXHJcbiAgICBjb25zdCBoZXJva3UgPSAnaHR0cHM6Ly93aW5vc2FpbHMuaGVyb2t1YXBwLmNvbSc7XHJcbiAgICBjb25zdCBpc0xvY2FsSG9zdCA9ICgpID0+IHtcclxuICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZS5pbmNsdWRlcyhcImxvY2FsaG9zdFwiKSkge1xyXG4gICAgICAgIHJldHVybiBgaHR0cDovL2xvY2FsaG9zdDoke3BvcnR9YDtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCB1cmwgPSBpc0xvY2FsSG9zdCgpIHx8IGhlcm9rdTtcclxuXHJcbiAgICByZXR1cm4gdXJsO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIEZldGNoIGFsbCByZXN0YXVyYW50cy5cclxuICAgKi9cclxuICBzdGF0aWMgZmV0Y2hSZXN0YXVyYW50cyhjYWxsYmFjaykge1xyXG4gICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgeGhyLm9wZW4oXCJHRVRcIiwgYCR7REJIZWxwZXIuQVBJX1VSTH0vcmVzdGF1cmFudHNgKTtcclxuICAgIHhoci5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICBjb25zdCByZXN0YXVyYW50cyA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgZGJQcm9taXNlLnB1dFJlc3RhdXJhbnRzKHJlc3RhdXJhbnRzKTtcclxuICAgICAgICBjYWxsYmFjayhudWxsLCByZXN0YXVyYW50cyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gT29wcyEuIEdvdCBhbiBlcnJvciBmcm9tIHNlcnZlci5cclxuICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgIGBSZXF1ZXN0IGZhaWxlZC4gUmV0dXJuZWQgc3RhdHVzIG9mICR7eGhyLnN0YXR1c30sIHRyeWluZyBpZGIuLi5gXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyBpZiB4aHIgcmVxdWVzdCBpc24ndCBjb2RlIDIwMCwgdHJ5IGlkYlxyXG4gICAgICAgIGRiUHJvbWlzZS5nZXRSZXN0YXVyYW50cygpLnRoZW4oaWRiUmVzdGF1cmFudHMgPT4ge1xyXG4gICAgICAgICAgaWYgKGlkYlJlc3RhdXJhbnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBpZGJSZXN0YXVyYW50cyk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjYWxsYmFjayhcIk5vIHJlc3RhdXJhbnRzIGZvdW5kIGluIGlkYlwiLCBudWxsKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIFhIUiBuZWVkcyBlcnJvciBoYW5kbGluZyBmb3Igd2hlbiBzZXJ2ZXIgaXMgZG93biAoZG9lc24ndCByZXNwb25kIG9yIHNlbmRzIGJhY2sgY29kZXMpXHJcbiAgICB4aHIub25lcnJvciA9ICgpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coXCJFcnJvciB3aGlsZSB0cnlpbmcgWEhSLCB0cnlpbmcgaWRiLi4uXCIpO1xyXG4gICAgICAvLyB0cnkgaWRiLCBhbmQgaWYgd2UgZ2V0IHJlc3RhdXJhbnRzIGJhY2ssIHJldHVybiB0aGVtLCBvdGhlcndpc2UgcmV0dXJuIGFuIGVycm9yXHJcbiAgICAgIGRiUHJvbWlzZS5nZXRSZXN0YXVyYW50cygpLnRoZW4oaWRiUmVzdGF1cmFudHMgPT4ge1xyXG4gICAgICAgIGlmIChpZGJSZXN0YXVyYW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGlkYlJlc3RhdXJhbnRzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY2FsbGJhY2soXCJObyByZXN0YXVyYW50cyBmb3VuZCBpbiBpZGJcIiwgbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH07XHJcbiAgICB4aHIuc2VuZCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2ggYSByZXN0YXVyYW50IGJ5IGl0cyBJRC5cclxuICAgKi9cclxuICBzdGF0aWMgZmV0Y2hSZXN0YXVyYW50QnlJZChpZCwgY2FsbGJhY2spIHtcclxuICAgIGZldGNoKGAke0RCSGVscGVyLkFQSV9VUkx9L3Jlc3RhdXJhbnRzLyR7aWR9YClcclxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spXHJcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJSZXN0YXVyYW50IGNvdWxkbid0IGJlIGZldGNoZWQgZnJvbSBuZXR3b3JrXCIpO1xyXG4gICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC50aGVuKGZldGNoZWRSZXN0YXVyYW50ID0+IHtcclxuICAgICAgICAvLyBpZiByZXN0YXVyYW50IGNvdWxkIGJlIGZldGNoZWQgZnJvbSBuZXR3b3JrOlxyXG4gICAgICAgIGRiUHJvbWlzZS5wdXRSZXN0YXVyYW50cyhmZXRjaGVkUmVzdGF1cmFudCk7XHJcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIGZldGNoZWRSZXN0YXVyYW50KTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKG5ldHdvcmtFcnJvciA9PiB7XHJcbiAgICAgICAgLy8gaWYgcmVzdGF1cmFudCBjb3VsZG4ndCBiZSBmZXRjaGVkIGZyb20gbmV0d29yazpcclxuICAgICAgICBjb25zb2xlLmxvZyhgJHtuZXR3b3JrRXJyb3J9LCB0cnlpbmcgaWRiLmApO1xyXG4gICAgICAgIGRiUHJvbWlzZS5nZXRSZXN0YXVyYW50cyhpZCkudGhlbihpZGJSZXN0YXVyYW50ID0+IHtcclxuICAgICAgICAgIGlmICghaWRiUmVzdGF1cmFudClcclxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKFwiUmVzdGF1cmFudCBub3QgZm91bmQgaW4gaWRiIGVpdGhlclwiLCBudWxsKTtcclxuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBpZGJSZXN0YXVyYW50KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGZXRjaCByZXN0YXVyYW50IHJldmlld3MgYnkgcmVzdGF1cmFudCBpZC5cclxuICAgKi9cclxuICBzdGF0aWMgZmV0Y2hzUmV2aWV3c0J5UmVzdGF1cmFudElkKGlkKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7REJIZWxwZXIuQVBJX1VSTH0vcmV2aWV3cy8/cmVzdGF1cmFudF9pZD0ke2lkfWApXHJcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKVxyXG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFwiUmV2aWV3cyBjb3VsZG4ndCBiZSBmZXRjaGVkIGZyb20gbmV0d29ya1wiKTtcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICB9KVxyXG4gICAgICAudGhlbihmZXRjaGVkUmV2aWV3cyA9PiB7XHJcbiAgICAgICAgZGJQcm9taXNlLnB1dFJldmlld3MoZmV0Y2hlZFJldmlld3MpO1xyXG4gICAgICAgIHJldHVybiBmZXRjaGVkUmV2aWV3cztcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKG5ldHdvcmtFcnJvciA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYCR7bmV0d29ya0Vycm9yfWApO1xyXG4gICAgICAgIHJldHVybiBkYlByb21pc2UuZ2V0UmV2aWV3c0ZvclJlc3RhdXJhbnQoaWQpXHJcbiAgICAgICAgLnRoZW4oaWRiUmV2aWV3cyA9PiB7XHJcbiAgICAgICAgICBpZighaWRiUmV2aWV3cy5sZW5ndGgpIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgcmV0dXJuIGlkYlJldmlld3M7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2ggcmVzdGF1cmFudHMgYnkgYSBjdWlzaW5lIHR5cGUgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXHJcbiAgICovXHJcbiAgc3RhdGljIGZldGNoUmVzdGF1cmFudEJ5Q3Vpc2luZShjdWlzaW5lLCBjYWxsYmFjaykge1xyXG4gICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzICB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZ1xyXG4gICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cygoZXJyb3IsIHJlc3RhdXJhbnRzKSA9PiB7XHJcbiAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBGaWx0ZXIgcmVzdGF1cmFudHMgdG8gaGF2ZSBvbmx5IGdpdmVuIGN1aXNpbmUgdHlwZVxyXG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSByZXN0YXVyYW50cy5maWx0ZXIociA9PiByLmN1aXNpbmVfdHlwZSA9PSBjdWlzaW5lKTtcclxuICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHRzKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGZXRjaCByZXN0YXVyYW50cyBieSBhIG5laWdoYm9yaG9vZCB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cclxuICAgKi9cclxuICBzdGF0aWMgZmV0Y2hSZXN0YXVyYW50QnlOZWlnaGJvcmhvb2QobmVpZ2hib3Job29kLCBjYWxsYmFjaykge1xyXG4gICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzXHJcbiAgICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRzKChlcnJvciwgcmVzdGF1cmFudHMpID0+IHtcclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIEZpbHRlciByZXN0YXVyYW50cyB0byBoYXZlIG9ubHkgZ2l2ZW4gbmVpZ2hib3Job29kXHJcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IHJlc3RhdXJhbnRzLmZpbHRlcihyID0+IHIubmVpZ2hib3Job29kID09IG5laWdoYm9yaG9vZCk7XHJcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0cyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2ggcmVzdGF1cmFudHMgYnkgYSBjdWlzaW5lIGFuZCBhIG5laWdoYm9yaG9vZCB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cclxuICAgKi9cclxuICBzdGF0aWMgZmV0Y2hSZXN0YXVyYW50QnlDdWlzaW5lQW5kTmVpZ2hib3Job29kKFxyXG4gICAgY3Vpc2luZSxcclxuICAgIG5laWdoYm9yaG9vZCxcclxuICAgIGNhbGxiYWNrXHJcbiAgKSB7XHJcbiAgICAvLyBGZXRjaCBhbGwgcmVzdGF1cmFudHNcclxuICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoKGVycm9yLCByZXN0YXVyYW50cykgPT4ge1xyXG4gICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdHMgPSByZXN0YXVyYW50cztcclxuICAgICAgICBpZiAoY3Vpc2luZSAhPSBcImFsbFwiKSB7XHJcbiAgICAgICAgICAvLyBmaWx0ZXIgYnkgY3Vpc2luZVxyXG4gICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuZmlsdGVyKHIgPT4gci5jdWlzaW5lX3R5cGUgPT0gY3Vpc2luZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChuZWlnaGJvcmhvb2QgIT0gXCJhbGxcIikge1xyXG4gICAgICAgICAgLy8gZmlsdGVyIGJ5IG5laWdoYm9yaG9vZFxyXG4gICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuZmlsdGVyKHIgPT4gci5uZWlnaGJvcmhvb2QgPT0gbmVpZ2hib3Job29kKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0cyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2ggYWxsIG5laWdoYm9yaG9vZHMgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXHJcbiAgICovXHJcbiAgc3RhdGljIGZldGNoTmVpZ2hib3Job29kcyhjYWxsYmFjaykge1xyXG4gICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzXHJcbiAgICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRzKChlcnJvciwgcmVzdGF1cmFudHMpID0+IHtcclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIEdldCBhbGwgbmVpZ2hib3Job29kcyBmcm9tIGFsbCByZXN0YXVyYW50c1xyXG4gICAgICAgIGNvbnN0IG5laWdoYm9yaG9vZHMgPSByZXN0YXVyYW50cy5tYXAoXHJcbiAgICAgICAgICAodiwgaSkgPT4gcmVzdGF1cmFudHNbaV0ubmVpZ2hib3Job29kXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyBSZW1vdmUgZHVwbGljYXRlcyBmcm9tIG5laWdoYm9yaG9vZHNcclxuICAgICAgICBjb25zdCB1bmlxdWVOZWlnaGJvcmhvb2RzID0gbmVpZ2hib3Job29kcy5maWx0ZXIoXHJcbiAgICAgICAgICAodiwgaSkgPT4gbmVpZ2hib3Job29kcy5pbmRleE9mKHYpID09IGlcclxuICAgICAgICApO1xyXG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHVuaXF1ZU5laWdoYm9yaG9vZHMpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZldGNoIGFsbCBjdWlzaW5lcyB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cclxuICAgKi9cclxuICBzdGF0aWMgZmV0Y2hDdWlzaW5lcyhjYWxsYmFjaykge1xyXG4gICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzXHJcbiAgICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRzKChlcnJvciwgcmVzdGF1cmFudHMpID0+IHtcclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIEdldCBhbGwgY3Vpc2luZXMgZnJvbSBhbGwgcmVzdGF1cmFudHNcclxuICAgICAgICBjb25zdCBjdWlzaW5lcyA9IHJlc3RhdXJhbnRzLm1hcCgodiwgaSkgPT4gcmVzdGF1cmFudHNbaV0uY3Vpc2luZV90eXBlKTtcclxuICAgICAgICAvLyBSZW1vdmUgZHVwbGljYXRlcyBmcm9tIGN1aXNpbmVzXHJcbiAgICAgICAgY29uc3QgdW5pcXVlQ3Vpc2luZXMgPSBjdWlzaW5lcy5maWx0ZXIoXHJcbiAgICAgICAgICAodiwgaSkgPT4gY3Vpc2luZXMuaW5kZXhPZih2KSA9PSBpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjYWxsYmFjayhudWxsLCB1bmlxdWVDdWlzaW5lcyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzdGF1cmFudCBwYWdlIFVSTC5cclxuICAgKi9cclxuICBzdGF0aWMgdXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KSB7XHJcbiAgICByZXR1cm4gYC4vcmVzdGF1cmFudC5odG1sP2lkPSR7cmVzdGF1cmFudC5pZH1gO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzdGF1cmFudCBpbWFnZSBVUkwuXHJcbiAgICovXHJcbiAgc3RhdGljIGltYWdlVXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KSB7XHJcbiAgICAgIGNvbnN0IHVybCA9IGAuL2ltZy8ke3Jlc3RhdXJhbnQucGhvdG9ncmFwaCB8fCByZXN0YXVyYW50LmlkfS1tZWRpdW0uanBnYDtcclxuICBcclxuICAgIHJldHVybiB1cmw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXN0YXVyYW50IHNyY3NldCBhdHRyaWJ1dGUgZm9yIGJyb3dzZXIgdG8gZGVjaWRlIGJlc3QgcmVzb2x1dGlvbi4gSXQgdXNlcyByZXN0YXVyYW50LnBob3RvZ3JhcGhcclxuICAgKiBhbmQgZmFsbGJhY2tzIHRvIHJlc3RhdXJhbnQuaWQgaWYgZm9ybWVyIGlzIG1pc3NpbmcuXHJcbiAgICovXHJcbiAgc3RhdGljIGltYWdlU3Jjc2V0Rm9yUmVzdGF1cmFudChyZXN0YXVyYW50KSB7XHJcbiAgICBjb25zdCBpbWFnZVNyYyA9IGAuL2ltZy8ke3Jlc3RhdXJhbnQucGhvdG9ncmFwaCB8fCByZXN0YXVyYW50LmlkfWA7XHJcbiAgICByZXR1cm4gYCR7aW1hZ2VTcmN9LXNtYWxsLmpwZyAzMDB3LFxyXG4gICAgICAgICAgICAke2ltYWdlU3JjfS1tZWRpdW0uanBnIDYwMHcsXHJcbiAgICAgICAgICAgICR7aW1hZ2VTcmN9LWxhcmdlLmpwZyA4MDB3YDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc3RhdXJhbnQgc2l6ZXMgYXR0cmlidXRlIHNvIGJyb3dzZXIga25vd3MgaW1hZ2Ugc2l6ZXMgYmVmb3JlIGRlY2lkaW5nXHJcbiAgICogd2hhdCBpbWFnZSB0byBkb3dubG9hZC5cclxuICAgKi9cclxuICBzdGF0aWMgaW1hZ2VTaXplc0ZvclJlc3RhdXJhbnQocmVzdGF1cmFudCkge1xyXG4gICAgcmV0dXJuIGAobWF4LXdpZHRoOiAzNjBweCkgMjgwcHgsXHJcbiAgICAgICAgICAgIChtYXgtd2lkdGg6IDYwMHB4KSA2MDBweCxcclxuICAgICAgICAgICAgNDAwcHhgO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1hcE1hcmtlckZvclJlc3RhdXJhbnQocmVzdGF1cmFudCwgbWFwKSB7XHJcbiAgICBjb25zdCBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcclxuICAgICAgcG9zaXRpb246IHJlc3RhdXJhbnQubGF0bG5nLFxyXG4gICAgICB0aXRsZTogcmVzdGF1cmFudC5uYW1lLFxyXG4gICAgICB1cmw6IERCSGVscGVyLnVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCksXHJcbiAgICAgIG1hcDogbWFwLFxyXG4gICAgICBhbmltYXRpb246IGdvb2dsZS5tYXBzLkFuaW1hdGlvbi5EUk9QXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBtYXJrZXI7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBpZGIgZnJvbSBcImlkYlwiO1xuXG5jb25zdCBkYlByb21pc2UgPSB7XG4gIC8vIGNyZWF0aW9uIGFuZCB1cGRhdGluZyBvZiBkYXRhYmFzZSBoYXBwZW5zIGhlcmUuXG4gIGRiOiBpZGIub3BlbihcInJlc3RhdXJhbnQtcmV2aWV3cy1kYlwiLCAzLCBmdW5jdGlvbih1cGdyYWRlRGIpIHtcbiAgICBzd2l0Y2ggKHVwZ3JhZGVEYi5vbGRWZXJzaW9uKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHVwZ3JhZGVEYi5jcmVhdGVPYmplY3RTdG9yZShcInJlc3RhdXJhbnRzXCIsIHsga2V5UGF0aDogXCJpZFwiIH0pO1xuICAgICAgY2FzZSAxOlxuICAgICAgICB1cGdyYWRlRGJcbiAgICAgICAgICAuY3JlYXRlT2JqZWN0U3RvcmUoXCJyZXZpZXdzXCIsIHsga2V5UGF0aDogXCJpZFwiIH0pXG4gICAgICAgICAgLmNyZWF0ZUluZGV4KFwicmVzdGF1cmFudF9pZFwiLCBcInJlc3RhdXJhbnRfaWRcIik7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHVwZ3JhZGVEYlxuICAgICAgICAgIC5jcmVhdGVPYmplY3RTdG9yZShcIm9mZmxpbmVcIiwgeyBhdXRvSW5jcmVtZW50OiB0cnVlLCBrZXlQYXRoOiBcImlkXCIgfSlcbiAgICAgICAgICAuY3JlYXRlSW5kZXgoXCJyZXN0YXVyYW50X2lkXCIsIFwicmVzdGF1cmFudF9pZFwiKTtcbiAgICB9XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBTYXZlIHJlc3RhdXJhbnRcbiAgICovXG4gIHB1dFJlc3RhdXJhbnRzKHJlc3RhdXJhbnRzLCBmb3JjZVVwZGF0ZSA9IGZhbHNlKSB7XG4gICAgaWYgKCFyZXN0YXVyYW50cy5wdXNoKSByZXN0YXVyYW50cyA9IFtyZXN0YXVyYW50c107XG4gICAgcmV0dXJuIHRoaXMuZGIudGhlbihkYiA9PiB7XG4gICAgICBjb25zdCBzdG9yZSA9IGRiXG4gICAgICAgIC50cmFuc2FjdGlvbihcInJlc3RhdXJhbnRzXCIsIFwicmVhZHdyaXRlXCIpXG4gICAgICAgIC5vYmplY3RTdG9yZShcInJlc3RhdXJhbnRzXCIpO1xuICAgICAgUHJvbWlzZS5hbGwoXG4gICAgICAgIHJlc3RhdXJhbnRzLm1hcChhcGlSZXN0YXVyYW50ID0+IHtcbiAgICAgICAgICByZXR1cm4gc3RvcmUuZ2V0KGFwaVJlc3RhdXJhbnQuaWQpLnRoZW4oaWRiUmVzdGF1cmFudCA9PiB7XG4gICAgICAgICAgICBpZiAoZm9yY2VVcGRhdGUpIHJldHVybiBzdG9yZS5wdXQoYXBpUmVzdGF1cmFudCk7XG4gICAgICAgICAgICBpZiAoIWlkYlJlc3RhdXJhbnQgfHwgbmV3IERhdGUoYXBpUmVzdGF1cmFudC51cGRhdGVkQXQpID4gbmV3IERhdGUoaWRiUmVzdGF1cmFudC51cGRhdGVkQXQpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzdG9yZS5wdXQoYXBpUmVzdGF1cmFudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICApLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzdG9yZS5jb21wbGV0ZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgcmVzdGF1cmFudFxuICAgKi9cbiAgZ2V0UmVzdGF1cmFudHMoaWQgPSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdGhpcy5kYi50aGVuKGRiID0+IHtcbiAgICAgIGNvbnN0IHN0b3JlID0gZGIudHJhbnNhY3Rpb24oXCJyZXN0YXVyYW50c1wiKS5vYmplY3RTdG9yZShcInJlc3RhdXJhbnRzXCIpO1xuICAgICAgaWYgKGlkKSByZXR1cm4gc3RvcmUuZ2V0KE51bWJlcihpZCkpO1xuICAgICAgcmV0dXJuIHN0b3JlLmdldEFsbCgpO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTYXZlIHJldmlld3NcbiAgICovXG4gIHB1dFJldmlld3MocmV2aWV3cykge1xuICAgIGlmICghcmV2aWV3cy5wdXNoKSByZXZpZXdzID0gW3Jldmlld3NdO1xuICAgIHJldHVybiB0aGlzLmRiLnRoZW4oZGIgPT4ge1xuICAgICAgY29uc3Qgc3RvcmUgPSBkYlxuICAgICAgICAudHJhbnNhY3Rpb24oXCJyZXZpZXdzXCIsIFwicmVhZHdyaXRlXCIpXG4gICAgICAgIC5vYmplY3RTdG9yZShcInJldmlld3NcIik7XG4gICAgICBQcm9taXNlLmFsbChcbiAgICAgICAgcmV2aWV3cy5tYXAoYXBpUmV2aWV3ID0+IHtcbiAgICAgICAgICByZXR1cm4gc3RvcmUuZ2V0KGFwaVJldmlldy5pZCkudGhlbihpZGJSZXZpZXcgPT4ge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAhaWRiUmV2aWV3IHx8XG4gICAgICAgICAgICAgIG5ldyBEYXRlKGFwaVJldmlldy51cGRhdGVkQXQpID4gbmV3IERhdGUoaWRiUmV2aWV3LnVwZGF0ZWRBdClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICByZXR1cm4gc3RvcmUucHV0KGFwaVJldmlldyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICApLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzdG9yZS5jb21wbGV0ZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LFxuXG4gIGdldFJldmlld3NGb3JSZXN0YXVyYW50KGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuZGIudGhlbihkYiA9PiB7XG4gICAgICBjb25zdCBzdG9yZUluZGV4ID0gZGJcbiAgICAgICAgLnRyYW5zYWN0aW9uKFwicmV2aWV3c1wiKVxuICAgICAgICAub2JqZWN0U3RvcmUoXCJyZXZpZXdzXCIpXG4gICAgICAgIC5pbmRleChcInJlc3RhdXJhbnRfaWRcIik7XG4gICAgICByZXR1cm4gc3RvcmVJbmRleC5nZXRBbGwoTnVtYmVyKGlkKSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGRiUHJvbWlzZTtcbiIsImltcG9ydCBEQkhlbHBlciBmcm9tIFwiLi9kYmhlbHBlclwiO1xuaW1wb3J0IGRiUHJvbWlzZSBmcm9tIFwiLi9kYnByb21pc2VcIjtcblxuZnVuY3Rpb24gaGFuZGxlQ2xpY2soKSB7XG4gIGNvbnN0IHJlc3RhdXJhbnRJZCA9IHRoaXMuZGF0YXNldC5pZDtcbiAgY29uc3QgZmF2ID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2FyaWEtcHJlc3NlZCcpID09ICd0cnVlJztcbiAgY29uc3QgdXJsID0gYCR7REJIZWxwZXIuQVBJX1VSTH0vcmVzdGF1cmFudHMvJHtyZXN0YXVyYW50SWR9Lz9pc19mYXZvcml0ZT0keyFmYXZ9YDtcbiAgY29uc3QgUFVUID0ge21ldGhvZDogJ1BVVCd9O1xuXG4gIC8vIFRPRE86IHVzZSBCYWNrZ3JvdW5kIFN5bmMgdG8gc3luYyBkYXRhIHdpdGggQVBJIHNlcnZlclxuICByZXR1cm4gZmV0Y2godXJsLCBQVVQpLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgIGlmICghcmVzcG9uc2Uub2spIHJldHVybiBQcm9taXNlLnJlamVjdChcIldlIGNvdWxkbid0IG1hcmsgcmVzdGF1cmFudCBhcyBmYXZvcml0ZS5cIik7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgfSkudGhlbih1cGRhdGVkUmVzdGF1cmFudCA9PiB7XG4gICAgLy8gdXBkYXRlIHJlc3RhdXJhbnQgb24gaWRiXG4gICAgZGJQcm9taXNlLnB1dFJlc3RhdXJhbnRzKHVwZGF0ZWRSZXN0YXVyYW50LCB0cnVlKTtcbiAgICAvLyBjaGFuZ2Ugc3RhdGUgb2YgdG9nZ2xlIGJ1dHRvblxuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdhcmlhLXByZXNzZWQnLCAhZmF2KTtcbiAgfSk7XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmF2b3JpdGVCdXR0b24ocmVzdGF1cmFudCkge1xuICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgYnV0dG9uLmlubmVySFRNTCA9IFwiJiN4Mjc2NDtcIjsgLy8gdGhpcyBpcyB0aGUgaGVhcnQgc3ltYm9sIGluIGhleCBjb2RlXG4gIGJ1dHRvbi5jbGFzc05hbWUgPSBcImZhdlwiOyAvLyB5b3UgY2FuIHVzZSB0aGlzIGNsYXNzIG5hbWUgdG8gc3R5bGUgeW91ciBidXR0b25cbiAgYnV0dG9uLmRhdGFzZXQuaWQgPSByZXN0YXVyYW50LmlkOyAvLyBzdG9yZSByZXN0YXVyYW50IGlkIGluIGRhdGFzZXQgZm9yIGxhdGVyXG4gIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBgTWFyayAke3Jlc3RhdXJhbnQubmFtZX0gYXMgYSBmYXZvcml0ZWApO1xuICBidXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLXByZXNzZWQnLCByZXN0YXVyYW50LmlzX2Zhdm9yaXRlKTtcbiAgYnV0dG9uLm9uY2xpY2sgPSBoYW5kbGVDbGljaztcblxuICByZXR1cm4gYnV0dG9uO1xufSIsImltcG9ydCBEQkhlbHBlciBmcm9tIFwiLi9kYmhlbHBlclwiO1xuaW1wb3J0IGRiUHJvbWlzZSBmcm9tIFwiLi9kYnByb21pc2VcIjtcblxuZnVuY3Rpb24gaGFuZGxlQ2xpY2soKSB7XG4gIGNvbnN0IHJlc3RhdXJhbnRJZCA9IHRoaXMuZGF0YXNldC5pZDtcbiAgY29uc3QgZmF2ID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2FyaWEtcHJlc3NlZCcpID09ICd0cnVlJztcbiAgY29uc3QgdXJsID0gYCR7REJIZWxwZXIuQVBJX1VSTH0vcmVzdGF1cmFudHMvJHtyZXN0YXVyYW50SWR9Lz9pc19mYXZvcml0ZT0keyFmYXZ9YDtcbiAgY29uc3QgUFVUID0ge21ldGhvZDogJ1BVVCd9O1xuXG4gIC8vIFRPRE86IHVzZSBCYWNrZ3JvdW5kIFN5bmMgdG8gc3luYyBkYXRhIHdpdGggQVBJIHNlcnZlclxuICByZXR1cm4gZmV0Y2godXJsLCBQVVQpLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgIGlmICghcmVzcG9uc2Uub2spIHJldHVybiBQcm9taXNlLnJlamVjdChcIldlIGNvdWxkbid0IG1hcmsgcmVzdGF1cmFudCBhcyBmYXZvcml0ZS5cIik7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgfSkudGhlbih1cGRhdGVkUmVzdGF1cmFudCA9PiB7XG4gICAgLy8gdXBkYXRlIHJlc3RhdXJhbnQgb24gaWRiXG4gICAgZGJQcm9taXNlLnB1dFJlc3RhdXJhbnRzKHVwZGF0ZWRSZXN0YXVyYW50LCB0cnVlKTtcbiAgICAvLyBjaGFuZ2Ugc3RhdGUgb2YgdG9nZ2xlIGJ1dHRvblxuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdhcmlhLXByZXNzZWQnLCAhZmF2KTtcbiAgfSk7XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmF2b3JpdGVCdXR0b24ocmVzdGF1cmFudCkge1xuICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgYnV0dG9uLmlubmVySFRNTCA9IFwiJiN4Mjc2NDtcIjsgLy8gdGhpcyBpcyB0aGUgaGVhcnQgc3ltYm9sIGluIGhleCBjb2RlXG4gIGJ1dHRvbi5jbGFzc05hbWUgPSBcImZhdlwiOyAvLyB5b3UgY2FuIHVzZSB0aGlzIGNsYXNzIG5hbWUgdG8gc3R5bGUgeW91ciBidXR0b25cbiAgYnV0dG9uLmRhdGFzZXQuaWQgPSByZXN0YXVyYW50LmlkOyAvLyBzdG9yZSByZXN0YXVyYW50IGlkIGluIGRhdGFzZXQgZm9yIGxhdGVyXG4gIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBgTWFyayAke3Jlc3RhdXJhbnQubmFtZX0gYXMgYSBmYXZvcml0ZWApO1xuICBidXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLXByZXNzZWQnLCByZXN0YXVyYW50LmlzX2Zhdm9yaXRlKTtcbiAgYnV0dG9uLm9uY2xpY2sgPSBoYW5kbGVDbGljaztcblxuICByZXR1cm4gYnV0dG9uO1xufSIsIid1c2Utc3RyaWN0JztcclxuXHJcbmltcG9ydCBEQkhlbHBlciBmcm9tICcuL2RiaGVscGVyJztcclxuaW1wb3J0ICcuL3JlZ2lzdGVyJztcclxuaW1wb3J0ICcuL2Jyb3dzZXInO1xyXG5pbXBvcnQgJy4vZmF2b3JpdGVidXR0b24nO1xyXG5pbXBvcnQgZmF2b3JpdGVCdXR0b24gZnJvbSAnLi9mYXZvcml0ZUJ1dHRvbic7XHJcblxyXG5cclxubGV0IHJlc3RhdXJhbnRzLFxyXG4gIG5laWdoYm9yaG9vZHMsXHJcbiAgY3Vpc2luZXNcclxudmFyIG5ld01hcFxyXG52YXIgbWFya2VycyA9IFtdXHJcblxyXG4vKipcclxuICogRmV0Y2ggbmVpZ2hib3Job29kcyBhbmQgY3Vpc2luZXMgYXMgc29vbiBhcyB0aGUgcGFnZSBpcyBsb2FkZWQuXHJcbiAqL1xyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKGV2ZW50KSA9PiB7XHJcbiAgZmV0Y2hOZWlnaGJvcmhvb2RzKCk7XHJcbiAgZmV0Y2hDdWlzaW5lcygpO1xyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBGZXRjaCBhbGwgbmVpZ2hib3Job29kcyBhbmQgc2V0IHRoZWlyIEhUTUwuXHJcbiAqL1xyXG5jb25zdCBmZXRjaE5laWdoYm9yaG9vZHMgPSAoKSA9PiB7XHJcbiAgREJIZWxwZXIuZmV0Y2hOZWlnaGJvcmhvb2RzKChlcnJvciwgbmVpZ2hib3Job29kcykgPT4ge1xyXG4gICAgaWYgKGVycm9yKSB7IC8vIEdvdCBhbiBlcnJvclxyXG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNlbGYubmVpZ2hib3Job29kcyA9IG5laWdoYm9yaG9vZHM7XHJcbiAgICAgIGZpbGxOZWlnaGJvcmhvb2RzSFRNTCgpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogU2V0IG5laWdoYm9yaG9vZHMgSFRNTC5cclxuICovXHJcbmNvbnN0IGZpbGxOZWlnaGJvcmhvb2RzSFRNTCA9IChuZWlnaGJvcmhvb2RzID0gc2VsZi5uZWlnaGJvcmhvb2RzKSA9PiB7XHJcbiAgY29uc3Qgc2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25laWdoYm9yaG9vZHMtc2VsZWN0Jyk7XHJcbiAgbmVpZ2hib3Job29kcy5mb3JFYWNoKG5laWdoYm9yaG9vZCA9PiB7XHJcbiAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuICAgIG9wdGlvbi5pbm5lckhUTUwgPSBuZWlnaGJvcmhvb2Q7XHJcbiAgICBvcHRpb24udmFsdWUgPSBuZWlnaGJvcmhvb2Q7XHJcbiAgICAvLyBBcmlhIHJvbGUgbmVlZHMgdG8gYmUgZHluYW1pY2FsbHkgYWRkZWQgdG9vXHJcbiAgICBvcHRpb24uc2V0QXR0cmlidXRlKCdyb2xlJywgJ29wdGlvbicpOyBcclxuICAgIHNlbGVjdC5hcHBlbmQob3B0aW9uKTtcclxuICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEZldGNoIGFsbCBjdWlzaW5lcyBhbmQgc2V0IHRoZWlyIEhUTUwuXHJcbiAqL1xyXG5jb25zdCBmZXRjaEN1aXNpbmVzID0gKCkgPT4ge1xyXG4gIERCSGVscGVyLmZldGNoQ3Vpc2luZXMoKGVycm9yLCBjdWlzaW5lcykgPT4ge1xyXG4gICAgaWYgKGVycm9yKSB7IC8vIEdvdCBhbiBlcnJvciFcclxuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzZWxmLmN1aXNpbmVzID0gY3Vpc2luZXM7XHJcbiAgICAgIGZpbGxDdWlzaW5lc0hUTUwoKTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCBjdWlzaW5lcyBIVE1MLlxyXG4gKi9cclxuY29uc3QgZmlsbEN1aXNpbmVzSFRNTCA9IChjdWlzaW5lcyA9IHNlbGYuY3Vpc2luZXMpID0+IHtcclxuICBjb25zdCBzZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3Vpc2luZXMtc2VsZWN0Jyk7XHJcblxyXG4gIGN1aXNpbmVzLmZvckVhY2goY3Vpc2luZSA9PiB7XHJcbiAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuICAgIG9wdGlvbi5pbm5lckhUTUwgPSBjdWlzaW5lO1xyXG4gICAgb3B0aW9uLnZhbHVlID0gY3Vpc2luZTtcclxuICAgICAgICAvLyBBcmlhIHJvbGUgbmVlZHMgdG8gYmUgZHluYW1pY2FsbHkgYWRkZWQgdG9vXHJcbiAgICAgICAgb3B0aW9uLnNldEF0dHJpYnV0ZSgncm9sZScsICdvcHRpb24nKTsgXHJcbiAgICBzZWxlY3QuYXBwZW5kKG9wdGlvbik7XHJcbiAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBVcGRhdGUgcGFnZSBhbmQgbWFwIGZvciBjdXJyZW50IHJlc3RhdXJhbnRzLlxyXG4gKi9cclxud2luZG93LnVwZGF0ZVJlc3RhdXJhbnRzID0gKCkgPT4ge1xyXG4gIGNvbnN0IGNTZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3Vpc2luZXMtc2VsZWN0Jyk7XHJcbiAgY29uc3QgblNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZWlnaGJvcmhvb2RzLXNlbGVjdCcpO1xyXG5cclxuICBjb25zdCBjSW5kZXggPSBjU2VsZWN0LnNlbGVjdGVkSW5kZXg7XHJcbiAgY29uc3QgbkluZGV4ID0gblNlbGVjdC5zZWxlY3RlZEluZGV4O1xyXG5cclxuICBjb25zdCBjdWlzaW5lID0gY1NlbGVjdFtjSW5kZXhdLnZhbHVlO1xyXG4gIGNvbnN0IG5laWdoYm9yaG9vZCA9IG5TZWxlY3RbbkluZGV4XS52YWx1ZTtcclxuXHJcbiAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50QnlDdWlzaW5lQW5kTmVpZ2hib3Job29kKGN1aXNpbmUsIG5laWdoYm9yaG9vZCwgKGVycm9yLCByZXN0YXVyYW50cykgPT4ge1xyXG4gICAgaWYgKGVycm9yKSB7IC8vIEdvdCBhbiBlcnJvciFcclxuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXNldFJlc3RhdXJhbnRzKHJlc3RhdXJhbnRzKTtcclxuICAgICAgZmlsbFJlc3RhdXJhbnRzSFRNTCgpO1xyXG4gICAgfVxyXG4gIH0pXHJcbn1cclxuXHJcbndpbmRvdy5pbml0TWFwID0gKCkgPT4ge1xyXG4gIGxldCBsb2MgPSB7XHJcbiAgICBsYXQ6IDQwLjcyMjIxNixcclxuICAgIGxuZzogLTczLjk4NzUwMVxyXG4gIH07XHJcbiAgbmV3TWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwJyksIHtcclxuICAgIHpvb206IDEyLFxyXG4gICAgY2VudGVyOiBsb2MsXHJcbiAgICBzY3JvbGx3aGVlbDogZmFsc2VcclxuICB9KTtcclxuICB1cGRhdGVSZXN0YXVyYW50cygpO1xyXG5cclxuLy8gR29vZ2xlIG1hcCBtYWtlcyBhIGJ1bmNoIG9mIGxpbmtzIHRoYXQgc3RlYWwgZm9jdXMgb2YgYSBzY3JlZW4gcmVhZGVyXHJcbi8vIEdvaW5nIHRvIGFkZCBhbiBldmVudCB0aGF0IHNldHMgYXR0cmlidXRlIHRvIGFsbCBvZiB0aGVzZSBpdGVtc1xyXG5jb25zdCBtYXBFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXAnKTtcclxubWFwRWwuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgKCkgPT4ge1xyXG4gIGNvbnN0IG1hcExpbmtzID0gbWFwRWwucXVlcnlTZWxlY3RvckFsbCgnYScpO1xyXG4gIG1hcExpbmtzLmZvckVhY2gobGluayA9PiBsaW5rLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnLTEnKSk7XHJcbn0pO1xyXG4gIFxyXG59XHJcblxyXG4vKipcclxuICogQ2xlYXIgY3VycmVudCByZXN0YXVyYW50cywgdGhlaXIgSFRNTCBhbmQgcmVtb3ZlIHRoZWlyIG1hcCBtYXJrZXJzLlxyXG4gKi9cclxuY29uc3QgcmVzZXRSZXN0YXVyYW50cyA9IChyZXN0YXVyYW50cykgPT4ge1xyXG4gIC8vIFJlbW92ZSBhbGwgcmVzdGF1cmFudHNcclxuICBzZWxmLnJlc3RhdXJhbnRzID0gW107XHJcbiAgY29uc3QgdWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzdGF1cmFudHMtbGlzdCcpO1xyXG4gIHVsLmlubmVySFRNTCA9ICcnO1xyXG5cclxuICAvLyBSZW1vdmUgYWxsIG1hcCBtYXJrZXJzXHJcbiAgaWYgKG1hcmtlcnMpIHtcclxuICAgIG1hcmtlcnMuZm9yRWFjaChtYXJrZXIgPT4gbWFya2VyLnNldE1hcChudWxsKSk7XHJcbiAgICBtYXJrZXJzID0gW107XHJcbiAgfVxyXG4gIHNlbGYucmVzdGF1cmFudHMgPSByZXN0YXVyYW50cztcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBhbGwgcmVzdGF1cmFudHMgSFRNTCBhbmQgYWRkIHRoZW0gdG8gdGhlIHdlYnBhZ2UuXHJcbiAqL1xyXG5jb25zdCBmaWxsUmVzdGF1cmFudHNIVE1MID0gKHJlc3RhdXJhbnRzID0gc2VsZi5yZXN0YXVyYW50cykgPT4ge1xyXG4gIGNvbnN0IHVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhdXJhbnRzLWxpc3QnKTtcclxuICByZXN0YXVyYW50cy5mb3JFYWNoKHJlc3RhdXJhbnQgPT4ge1xyXG4gICAgdWwuYXBwZW5kKGNyZWF0ZVJlc3RhdXJhbnRIVE1MKHJlc3RhdXJhbnQpKTtcclxuICB9KTtcclxuICBhZGRNYXJrZXJzVG9NYXAoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSByZXN0YXVyYW50IEhUTUwuXHJcbiAqL1xyXG5jb25zdCBjcmVhdGVSZXN0YXVyYW50SFRNTCA9IChyZXN0YXVyYW50KSA9PiB7XHJcbiAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xyXG4gIGNvbnN0IGltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XHJcbiAgaW1hZ2UuY2xhc3NOYW1lID0gJ3Jlc3RhdXJhbnQtaW1nJztcclxuICBpbWFnZS5zcmMgPSBEQkhlbHBlci5pbWFnZVVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCk7XHJcbiAgaW1hZ2Uuc3Jjc2V0ID0gREJIZWxwZXIuaW1hZ2VTcmNzZXRGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpO1xyXG4gIGltYWdlLnNpemVzID0gREJIZWxwZXIuaW1hZ2VTaXplc0ZvclJlc3RhdXJhbnQocmVzdGF1cmFudCk7XHJcbiAgaW1hZ2UuYWx0ID0gYCR7cmVzdGF1cmFudC5uYW1lfSwgcHJvbW90aW9uYWwgaW1hZ2UuYDtcclxuICBsaS5hcHBlbmQoaW1hZ2UpO1xyXG5cclxuICBjb25zdCBuYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDInKTtcclxuICBuYW1lLmlubmVySFRNTCA9IHJlc3RhdXJhbnQubmFtZTtcclxuICBsaS5hcHBlbmQobmFtZSk7XHJcblxyXG4gIGNvbnN0IGZhdiA9IGZhdm9yaXRlQnV0dG9uKHJlc3RhdXJhbnQpO1xyXG4gIGZhdi5hbHQgPSBgU2F2ZSAke3Jlc3RhdXJhbnQubmFtZX0gYXMgYSBmYXZvcml0ZWA7XHJcbiAgZmF2LmNsYXNzTmFtZSA9ICdmYXYtcmVzdGF1cmFudCc7XHJcbiAgbGkuYXBwZW5kKGZhdik7XHJcblxyXG4gIGNvbnN0IG5laWdoYm9yaG9vZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuICBuZWlnaGJvcmhvb2QuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5uZWlnaGJvcmhvb2Q7XHJcbiAgbGkuYXBwZW5kKG5laWdoYm9yaG9vZCk7XHJcblxyXG4gIGNvbnN0IGFkZHJlc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgY29uc3QgYWRkcmVzc0FycmF5ID0gcmVzdGF1cmFudC5hZGRyZXNzLnNwbGl0KCcsJylcclxuICBjb25zdCBjaXR5U3RhdGVaaXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgY29uc3QgbW9yZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICBjb25zdCB1cmwgPSBEQkhlbHBlci51cmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpO1xyXG4gIFxyXG4gIGFkZHJlc3MuaW5uZXJIVE1MID0gYWRkcmVzc0FycmF5WzBdO1xyXG4gIGNpdHlTdGF0ZVppcC5pbm5lckhUTUwgPSBgJHthZGRyZXNzQXJyYXlbMV19LCAke2FkZHJlc3NBcnJheVsyXX1gO1xyXG5cclxuICBsaS5hcHBlbmQoYWRkcmVzcyk7XHJcbiAgbGkuYXBwZW5kKGNpdHlTdGF0ZVppcCk7XHJcblxyXG4gIG1vcmUuY2xhc3NOYW1lID0gJ3ZpZXctZGV0YWlscy1idG4nO1xyXG4gIG1vcmUuaW5uZXJIVE1MID0gJ1ZpZXcgRGV0YWlscyc7XHJcbiAgbW9yZS50eXBlID0gJ0J1dHRvbidcclxuICBtb3JlLnNldEF0dHJpYnV0ZSgncm9sZScsICdidXR0b24nKTtcclxuICBtb3JlLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIGBWaWV3IG1vcmUgZGV0YWlscyBhYm91dCAke3Jlc3RhdXJhbnQubmFtZX1gKVxyXG4gIG1vcmUuaHJlZiA9IHVybDtcclxuICBsaS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xyXG4gICAgd2luZG93LmxvY2F0aW9uID0gdXJsO1xyXG4gIH0pO1xyXG5cclxuICBsaS5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBcclxuICBgJHtyZXN0YXVyYW50Lm5hbWV9IGlzIGFuICR7cmVzdGF1cmFudC5jdWlzaW5lX3R5cGV9IHJlc3RhdXJhbnQgaW4gJHtyZXN0YXVyYW50Lm5laWdoYm9yaG9vZH1gXHJcbiAgKVxyXG4gIGxpLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnMCcpO1xyXG4gIFxyXG4gIGxpLmFwcGVuZChtb3JlKVxyXG5cclxuICByZXR1cm4gbGlcclxufVxyXG5cclxuY29uc3QgYWRkTWFya2Vyc1RvTWFwID0gKHJlc3RhdXJhbnRzID0gc2VsZi5yZXN0YXVyYW50cykgPT4ge1xyXG4gIHJlc3RhdXJhbnRzLmZvckVhY2gocmVzdGF1cmFudCA9PiB7XHJcbiAgICAvLyBBZGQgbWFya2VyIHRvIHRoZSBtYXBcclxuICAgIGNvbnN0IG1hcmtlciA9IERCSGVscGVyLm1hcE1hcmtlckZvclJlc3RhdXJhbnQocmVzdGF1cmFudCwgbmV3TWFwKTtcclxuICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcmtlciwgJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IG1hcmtlci51cmxcclxuICAgIH0pO1xyXG4gICAgbWFya2Vycy5wdXNoKG1hcmtlcik7XHJcbiAgfSk7XHJcbn1cclxuXHJcbiIsImNvbnN0IHsgc2VydmljZVdvcmtlciB9ID0gbmF2aWdhdG9yO1xyXG5cclxuY29uc3QgcmVnaXN0ZXJTZXJ2aWNlV29ya2VyID0gKCkgPT4ge1xyXG4gIGlmIChcInNlcnZpY2VXb3JrZXJcIiBpbiBuYXZpZ2F0b3IpIHtcclxuICAgIHNlcnZpY2VXb3JrZXJcclxuICAgICAgLnJlZ2lzdGVyKFwiLi9zdy5qc1wiLCB7IHNjb3BlOiBcIi4vXCIgfSlcclxuICAgICAgLnRoZW4ocmVnaXN0cmF0aW9uID0+IHtcclxuICAgICAgICBjb25zb2xlLmluZm8oXCJTZXJ2aWNlIHdvcmtlciByZWdpc3RlcmVkXCIsIHJlZ2lzdHJhdGlvbi5zY29wZSk7XHJcbiAgICAgICAgY29uc3Qgc3cgPSB7fTtcclxuXHJcbiAgICAgICAgaWYgKHJlZ2lzdHJhdGlvbi5pbnN0YWxsaW5nKSB7XHJcbiAgICAgICAgICBzdy5zdGF0dXMgPSByZWdpc3RyYXRpb24uaW5zdGFsbGluZztcclxuICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIlNlcnZpY2Ugd29ya2VyIGluc3RhbGxpbmdcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocmVnaXN0cmF0aW9uLndhaXRpbmcpIHtcclxuICAgICAgICAgIHN3LnN0YXR1cyA9IHJlZ2lzdHJhdGlvbi53YWl0aW5nO1xyXG4gICAgICAgICAgY29uc29sZS53YXJuKFwiU2VydmljZSB3b3JrZXIgd2FpdGluZ1wiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyZWdpc3RyYXRpb24uYWN0aXZlKSB7XHJcbiAgICAgICAgICBzdy5zdGF0dXMgPSByZWdpc3RyYXRpb24uYWN0aXZlO1xyXG4gICAgICAgICAgY29uc29sZS5pbmZvKFwiU2VydmljZSB3b3JrZXIgYWN0aXZlXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCdzeW5jJyBpbiAgcmVnaXN0cmF0aW9uKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIlN5bmMgYWN0aXZlXCIpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc3cuc3RhdHVzKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlNlcnZpY2Ugd29ya2VyIHN0YXRlOlwiLCBzdy5zdGF0dXMuc3RhdGUpO1xyXG4gICAgICAgICAgc3cuc3RhdHVzLmFkZEV2ZW50TGlzdGVuZXIoXCJzdGF0ZWNoYW5nZVwiLCBlID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJTZXJ2aWNlIHdvcmtlciBzdGF0ZTpcIiwgZS50YXJnZXQuc3RhdGUpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiU2VydmljZSB3b3JrZXIgaW5zdGFsbGF0aW9uIGZhaWxlZFwiLCBlcnIpO1xyXG4gICAgICAgIC8vIGxvYWRQYWdlKCk7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gSWYgeW91IGVuZCB1cCBoZXJlIHNlcnZpY2V3b3JrZXIgaXMgbm90IHN1cHBvcnRlZFxyXG4gIC8vbG9hZFBhZ2UoKTtcclxufTtcclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGV2ZW50ID0+IHtcclxuICByZWdpc3RlclNlcnZpY2VXb3JrZXIoKTtcclxufSk7XHJcbiJdfQ=="}