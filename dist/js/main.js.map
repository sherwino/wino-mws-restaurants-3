{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/idb/lib/idb.js","src/js/browser.js","src/js/dbhelper.js","src/js/dbpromise.js","src/js/favoriteButton.js","src/js/favoritebutton.js","src/js/main.js","src/js/register.js"],"names":[],"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","file":"main.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","let usersBrowser;\r\nconst { userAgent } = navigator;\r\n\r\n// The order matters here, and this may report false positives for unlisted browsers.\r\nif (userAgent.indexOf('Firefox') > -1) {\r\n    usersBrowser = 'Mozilla Firefox';\r\n} else if (userAgent.indexOf('Opera') > -1) {\r\n    usersBrowser = 'Opera';\r\n} else if (userAgent.indexOf('Trident') > -1) {\r\n    usersBrowser = 'Microsoft Internet Explorer';\r\n} else if (userAgent.indexOf('Edge') > -1) {\r\n    usersBrowser = 'Microsoft Edge';\r\n} else if (userAgent.indexOf('Chrome') > -1) {\r\n    usersBrowser = 'Google Chrome or Chromium';\r\n} else if (userAgent.indexOf('Safari') > -1) {\r\n    usersBrowser = 'Apple Safari';\r\n} else {\r\n    usersBrowser = 'unknown';\r\n}\r\n\r\nconsole.log(`You are using: ${usersBrowser}`);\r\n","import dbPromise from \"./dbpromise\";\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nexport default class DBHelper {\r\n  /**\r\n   * API URL\r\n   */\r\n  static get API_URL() {\r\n    const port = 1337; // port where sails server will listen.\r\n\r\n    const heroku = 'https://winosails.herokuapp.com';\r\n    const isLocalHost = () => {\r\n      if (window.location.hostname.includes(\"localhost\")) {\r\n        return `http://localhost:${port}`;\r\n      }\r\n    };\r\n\r\n    const url = isLocalHost() || heroku;\r\n\r\n    return url;\r\n  }\r\n\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open(\"GET\", `${DBHelper.API_URL}/restaurants`);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) {\r\n        const restaurants = JSON.parse(xhr.responseText);\r\n        dbPromise.putRestaurants(restaurants);\r\n        callback(null, restaurants);\r\n      } else {\r\n        // Oops!. Got an error from server.\r\n        console.log(\r\n          `Request failed. Returned status of ${xhr.status}, trying idb...`\r\n        );\r\n        // if xhr request isn't code 200, try idb\r\n        dbPromise.getRestaurants().then(idbRestaurants => {\r\n          if (idbRestaurants.length) {\r\n            callback(null, idbRestaurants);\r\n          } else {\r\n            callback(\"No restaurants found in idb\", null);\r\n          }\r\n        });\r\n      }\r\n    };\r\n    // XHR needs error handling for when server is down (doesn't respond or sends back codes)\r\n    xhr.onerror = () => {\r\n      console.log(\"Error while trying XHR, trying idb...\");\r\n      // try idb, and if we get restaurants back, return them, otherwise return an error\r\n      dbPromise.getRestaurants().then(idbRestaurants => {\r\n        if (idbRestaurants.length) {\r\n          callback(null, idbRestaurants);\r\n        } else {\r\n          callback(\"No restaurants found in idb\", null);\r\n        }\r\n      });\r\n    };\r\n    xhr.send();\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    fetch(`${DBHelper.API_URL}/restaurants/${id}`)\r\n      .then(response => {\r\n        if (!response.ok)\r\n          return Promise.reject(\"Restaurant couldn't be fetched from network\");\r\n        return response.json();\r\n      })\r\n      .then(fetchedRestaurant => {\r\n        // if restaurant could be fetched from network:\r\n        dbPromise.putRestaurants(fetchedRestaurant);\r\n        return callback(null, fetchedRestaurant);\r\n      })\r\n      .catch(networkError => {\r\n        // if restaurant couldn't be fetched from network:\r\n        console.log(`${networkError}, trying idb.`);\r\n        dbPromise.getRestaurants(id).then(idbRestaurant => {\r\n          if (!idbRestaurant)\r\n            return callback(\"Restaurant not found in idb either\", null);\r\n          return callback(null, idbRestaurant);\r\n        });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurant reviews by restaurant id.\r\n   */\r\n  static fetchsReviewsByRestaurantId(id) {\r\n    return fetch(`${DBHelper.API_URL}/reviews/?restaurant_id=${id}`)\r\n      .then(response => {\r\n        if (!response.ok)\r\n          return Promise.reject(\"Reviews couldn't be fetched from network\");\r\n        return response.json();\r\n      })\r\n      .then(fetchedReviews => {\r\n        dbPromise.putReviews(fetchedReviews);\r\n        return fetchedReviews;\r\n      })\r\n      .catch(networkError => {\r\n        console.log(`${networkError}`);\r\n        return dbPromise.getReviewsForRestaurant(id)\r\n        .then(idbReviews => {\r\n          if(!idbReviews.length) return null;\r\n          return idbReviewsl\r\n        });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    callback\r\n  ) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != \"all\") {\r\n          // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != \"all\") {\r\n          // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map(\r\n          (v, i) => restaurants[i].neighborhood\r\n        );\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter(\r\n          (v, i) => neighborhoods.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter(\r\n          (v, i) => cuisines.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return `./restaurant.html?id=${restaurant.id}`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n      const url = `./img/${restaurant.photograph || restaurant.id}-medium.jpg`;\r\n  \r\n    return url;\r\n  }\r\n\r\n  /**\r\n   * Restaurant srcset attribute for browser to decide best resolution. It uses restaurant.photograph\r\n   * and fallbacks to restaurant.id if former is missing.\r\n   */\r\n  static imageSrcsetForRestaurant(restaurant) {\r\n    const imageSrc = `./img/${restaurant.photograph || restaurant.id}`;\r\n    return `${imageSrc}-small.jpg 300w,\r\n            ${imageSrc}-medium.jpg 600w,\r\n            ${imageSrc}-large.jpg 800w`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant sizes attribute so browser knows image sizes before deciding\r\n   * what image to download.\r\n   */\r\n  static imageSizesForRestaurant(restaurant) {\r\n    return `(max-width: 360px) 280px,\r\n            (max-width: 600px) 600px,\r\n            400px`;\r\n  }\r\n\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n    return marker;\r\n  }\r\n}\r\n","import idb from 'idb';\n\nconst dbPromise = {\n  // creation and updating of database happens here.\n  db: idb.open('restaurant-reviews-db', 2, function (upgradeDb) {\n    switch (upgradeDb.oldVersion) {\n      case 0:\n        upgradeDb.createObjectStore('restaurants', { keyPath: 'id' });\n      case 1: \n      upgradeDb.createObjectStore('reviews', { keyPath: 'id'})\n      .createIndex('restaurant_id', 'restaurant_id');\n    }\n  }),\n\n  /**\n   * Save a restaurant or array of restaurants into idb, using promises.\n   */\n  putRestaurants(restaurants, forceUpdate = false) {\n    if (!restaurants.push) restaurants = [restaurants];\n    return this.db.then(db => {\n      const store = db.transaction('restaurants', 'readwrite').objectStore('restaurants');\n      Promise.all(restaurants.map(networkRestaurant => {\n        return store.get(networkRestaurant.id).then(idbRestaurant => {\n          if(forceUpdate) return store.put(networkRestaurant);\n          if (!idbRestaurant || new Date(networkRestaurant.updatedAt) > new Date(idbRestaurant.updatedAt)) {\n            return store.put(networkRestaurant);  \n          } \n        });\n      })).then(function () {\n        return store.complete;\n      });\n    });\n  },\n\n  /**\n   * Get a restaurant, by its id, or all stored restaurants in idb using promises.\n   * If no argument is passed, all restaurants will returned.\n   */\n  getRestaurants(id = undefined) {\n    return this.db.then(db => {\n      const store = db.transaction('restaurants').objectStore('restaurants');\n      if (id) return store.get(Number(id));\n      return store.getAll();\n    });\n  },\n\n  putReviews(reviews) {\n    if (!reviews.push) reviews = [reviews];\n    return this.db.then(db => {\n      const store = db.transaction('reviews', 'readwrite').objectStore('reviews');\n      Promise.all(reviews.map(networkReview => {\n        return store.get(networkReview.id).then(idbReview => {\n          if(!idbReview || new Date(networkReview.updatedAt) > new Date(idbReview.updatedAt)) {\n            return store.put(networkReview);\n          }\n        });\n      })).then(function () {\n        return store.completel\n      });\n    });\n  },\n\n  getReviewsForRestaurant(id) {\n    return this.db.then(db => {\n      const storeIndex = db.transaction('reviews').objectStore('reviews').index('restaurant_id');\n      return storeIndex.getAll(Number(id));\n    });\n  },\n\n};\n\nexport default dbPromise;","import DBHelper from \"./dbhelper\";\nimport dbPromise from \"./dbpromise\";\n\nfunction handleClick() {\n  const restaurantId = this.dataset.id;\n  const fav = this.getAttribute('aria-pressed') == 'true';\n  const url = `${DBHelper.API_URL}/restaurants/${restaurantId}/?is_favorite=${!fav}`;\n  const PUT = {method: 'PUT'};\n\n  // TODO: use Background Sync to sync data with API server\n  return fetch(url, PUT).then(response => {\n    if (!response.ok) return Promise.reject(\"We couldn't mark restaurant as favorite.\");\n    return response.json();\n  }).then(updatedRestaurant => {\n    // update restaurant on idb\n    dbPromise.putRestaurants(updatedRestaurant, true);\n    // change state of toggle button\n    this.setAttribute('aria-pressed', !fav);\n  });\n}\n\n\nexport default function favoriteButton(restaurant) {\n  const button = document.createElement('button');\n  button.innerHTML = \"&#x2764;\"; // this is the heart symbol in hex code\n  button.className = \"fav\"; // you can use this class name to style your button\n  button.dataset.id = restaurant.id; // store restaurant id in dataset for later\n  button.setAttribute('aria-label', `Mark ${restaurant.name} as a favorite`);\n  button.setAttribute('aria-pressed', restaurant.is_favorite);\n  button.onclick = handleClick;\n\n  return button;\n}","import DBHelper from \"./dbhelper\";\nimport dbPromise from \"./dbpromise\";\n\nfunction handleClick() {\n  const restaurantId = this.dataset.id;\n  const fav = this.getAttribute('aria-pressed') == 'true';\n  const url = `${DBHelper.API_URL}/restaurants/${restaurantId}/?is_favorite=${!fav}`;\n  const PUT = {method: 'PUT'};\n\n  // TODO: use Background Sync to sync data with API server\n  return fetch(url, PUT).then(response => {\n    if (!response.ok) return Promise.reject(\"We couldn't mark restaurant as favorite.\");\n    return response.json();\n  }).then(updatedRestaurant => {\n    // update restaurant on idb\n    dbPromise.putRestaurants(updatedRestaurant, true);\n    // change state of toggle button\n    this.setAttribute('aria-pressed', !fav);\n  });\n}\n\n\nexport default function favoriteButton(restaurant) {\n  const button = document.createElement('button');\n  button.innerHTML = \"&#x2764;\"; // this is the heart symbol in hex code\n  button.className = \"fav\"; // you can use this class name to style your button\n  button.dataset.id = restaurant.id; // store restaurant id in dataset for later\n  button.setAttribute('aria-label', `Mark ${restaurant.name} as a favorite`);\n  button.setAttribute('aria-pressed', restaurant.is_favorite);\n  button.onclick = handleClick;\n\n  return button;\n}","'use-strict';\r\n\r\nimport DBHelper from './dbhelper';\r\nimport './register';\r\nimport './browser';\r\nimport './favoritebutton';\r\nimport favoriteButton from './favoriteButton';\r\n\r\n\r\nlet restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar newMap\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    // Aria role needs to be dynamically added too\r\n    option.setAttribute('role', 'option'); \r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n        // Aria role needs to be dynamically added too\r\n        option.setAttribute('role', 'option'); \r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nwindow.updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  newMap = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n\r\n// Google map makes a bunch of links that steal focus of a screen reader\r\n// Going to add an event that sets attribute to all of these items\r\nconst mapEl = document.getElementById('map');\r\nmapEl.addEventListener(\"keydown\", () => {\r\n  const mapLinks = mapEl.querySelectorAll('a');\r\n  mapLinks.forEach(link => link.setAttribute('tabindex', '-1'));\r\n});\r\n  \r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if (markers) {\r\n    markers.forEach(marker => marker.setMap(null));\r\n    markers = [];\r\n  }\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.srcset = DBHelper.imageSrcsetForRestaurant(restaurant);\r\n  image.sizes = DBHelper.imageSizesForRestaurant(restaurant);\r\n  image.alt = `${restaurant.name}, promotional image.`;\r\n  li.append(image);\r\n\r\n  const name = document.createElement('h2');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const fav = favoriteButton(restaurant);\r\n  fav.alt = `Save ${restaurant.name} as a favorite`;\r\n  fav.className = 'fav-restaurant';\r\n  li.append(fav);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  const addressArray = restaurant.address.split(',')\r\n  const cityStateZip = document.createElement('p');\r\n  const more = document.createElement('a');\r\n  const url = DBHelper.urlForRestaurant(restaurant);\r\n  \r\n  address.innerHTML = addressArray[0];\r\n  cityStateZip.innerHTML = `${addressArray[1]}, ${addressArray[2]}`;\r\n\r\n  li.append(address);\r\n  li.append(cityStateZip);\r\n\r\n  more.className = 'view-details-btn';\r\n  more.innerHTML = 'View Details';\r\n  more.type = 'Button'\r\n  more.setAttribute('role', 'button');\r\n  more.setAttribute('aria-label', `View more details about ${restaurant.name}`)\r\n  more.href = url;\r\n  li.addEventListener('click', (event) => {\r\n    window.location = url;\r\n  });\r\n\r\n  li.setAttribute('aria-label', \r\n  `${restaurant.name} is an ${restaurant.cuisine_type} restaurant in ${restaurant.neighborhood}`\r\n  )\r\n  li.setAttribute('tabindex', '0');\r\n  \r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, newMap);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    markers.push(marker);\r\n  });\r\n}\r\n\r\n","const { serviceWorker } = navigator;\r\n\r\nconst registerServiceWorker = () => {\r\n    if ('serviceWorker' in navigator) {\r\n        serviceWorker.register('./sw.js', \r\n            { scope: './' }\r\n        ).then((registration) => {\r\n            console.info('Service worker registered', registration.scope);\r\n            const sw = {};\r\n    \r\n            if (registration.installing) {\r\n                sw.status = registration.installing;\r\n                console.info('Service worker installing');\r\n            }\r\n    \r\n            if (registration.waiting) {\r\n                sw.status = registration.waiting;\r\n                console.warn('Service worker waiting');\r\n            }\r\n    \r\n            if (registration.active) {\r\n                sw.status = registration.active;\r\n                console.info('Service worker active');\r\n            }\r\n    \r\n            if (sw.status) {\r\n                console.log('Service worker state:', sw.status.state);\r\n                sw.status.addEventListener('statechange', (e) => {\r\n                    console.log('Service worker state:', e.target.state)\r\n                });\r\n            }\r\n        }).catch(() => {\r\n            console.error('Service worker installation failed');\r\n        })\r\n    };\r\n};\r\n\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n    registerServiceWorker();\r\n    \r\n  });"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}